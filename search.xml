<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>大一暑假小结</title>
      <link href="/2023/08/03/2023-08-02-%E6%9A%91%E5%81%87%E8%BF%87%E5%8D%8A%E5%B0%8F%E6%80%BB%E7%BB%93/"/>
      <url>/2023/08/03/2023-08-02-%E6%9A%91%E5%81%87%E8%BF%87%E5%8D%8A%E5%B0%8F%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="暑假过半小总结"><a href="#暑假过半小总结" class="headerlink" title="暑假过半小总结"></a>暑假过半小总结</h1><h2 id="学习永无止境"><a href="#学习永无止境" class="headerlink" title="学习永无止境"></a>学习永无止境</h2><p>自从放假以来，已经有一个多月了。这三十多天里，虽然不能说收获颇多，起码能称得上充实有料。都快上大二的人了，才开始重视保研竞赛加分，只能说侧面反映这个大一摆得真得舒服。不论怎样，起码已经开始动起来了：</p><h3 id="算法：从入门到入士"><a href="#算法：从入门到入士" class="headerlink" title="算法：从入门到入士(?"></a>算法：从入门到入士(?</h3><p>学习了（观看，部分实现）左神的19节体系算法班的课程，课程时长共计40h，接触了包括但不限于复杂度、异或运算、归并排序、二叉树、递归与动态规划、KMP算法、bfprt算法等等知识概念，不过有很大程度<br>上都是看得很爽而自己不太想动手。这是一个需要耐心解决的毛病😄。主要还是要亲自下海感受一下这些算法的魅力之处，老是看别人玩怎么行，不手撕一下代码这个东西永远都是别人的。所以，从今天起，每一次的课程都要<br>以自己动手为最终目标，而不是以量为目标学习。不过量也不能太少，起码每天要接触些新的奇技淫巧，也要做到手不生疏就行。</p><h3 id="规划：任何时候都不迟！"><a href="#规划：任何时候都不迟！" class="headerlink" title="规划：任何时候都不迟！"></a>规划：任何时候都不迟！</h3><p>初步了解、规划大二的时间安排情况。<code>首先</code>要保证课内的课程分数可观，起码要能有一定的提升，主课不能落下，所以晚上千万要早一些睡。 <code>其次</code>，要及时关注教务处的通知，比如这一次的全国大学生数学竞赛就是因为我太专注于<br>（？还不是你好久没登教务处网）复习而没有关注到报名需求，导致最后失去这个绝佳的机会。又要等待一年才能有机会参加。 <code>最后</code>，要合理规划时间，腾出来的时间要么用来看专业书，要么用来看名校的网课，要么用来考研，要么用来提高课内的学分绩点课程，要么用来弄竞赛或者科研，要么用来跑实验室给学长学姐打杂活（如果有机会进实验室的话🤭）。总之，用来玩的时间可以说越来越少了，大学很短，且行且珍惜。</p><h3 id="走访：穿越到未来看我的样子"><a href="#走访：穿越到未来看我的样子" class="headerlink" title="走访：穿越到未来看我的样子"></a>走访：穿越到未来看我的样子</h3><p>这个暑假还<code>走访了oppo、百度、腾讯三家头部企业</code>，其中oppo是我校的学长学姐接待的，热情满满；百度是部门刚入职的学长接待的，很接地气；腾讯是位十分漂亮的小姐姐带我们走了全程，传授了很多面经。总的来说，虽然我还没有接触什么技术栈或者一些具体的工作流程，但是在像这些公司一样的一家<code>重视员工</code>的企业，我觉得<code>非常具有幸福感</code>~跟他们交流，不仅对自己的未来规划会更加清晰，还能收获一些分量十足的建议，这也是我非常想进实验室的原因。一定要努力呀！！</p><h3 id="自我反思：提醒自己入行的初衷"><a href="#自我反思：提醒自己入行的初衷" class="headerlink" title="自我反思：提醒自己入行的初衷"></a>自我反思：提醒自己入行的初衷</h3><p>其实我还是会时常问自己，为什么我要选择这个道路？思来想去，到最后答案都是想创造一个机器替代人工的社会，一个生产力爆棚的社会，一个精神层次能更高的社会。我小时候就有<code>危机感</code>，害怕人类被机器取代以后就难以掌控世界。其实这种担心客观来说是合理的，但是这不是抑制技术发展的理由。我相信在良好的环境（不论是监管环境，开源环境或者是某些方面的社会环境）下，机器一定能给人一种<code>类天堂</code>的感觉，只是这离我们还有一点点距离。在这个注定会深刻改变未来的时间点，踏足计算机科学真的是一件很酷的事情。</p><h2 id="给生活加点料"><a href="#给生活加点料" class="headerlink" title="给生活加点料"></a>给生活加点料</h2><h3 id="足球：最大的爱好"><a href="#足球：最大的爱好" class="headerlink" title="足球：最大的爱好"></a>足球：最大的爱好</h3><p>一回来就有同学约球，一踢就是到晚上十点，结果回家的路上去地铁站，跟同学聊天tmd走偏了好几公里，好在赶上末班车顺利到家😕，要不真的半夜还在马路上，谁看了都担心这帅小伙被拐走了U•ェ•*U</p><h3 id="电影：八角笼中"><a href="#电影：八角笼中" class="headerlink" title="电影：八角笼中"></a>电影：八角笼中</h3><p>高中同学约我去看，虽然套路确实太tm土了，不过里面的一些人物还是挺引人深思的：穷困家庭的孩子，小时候就跟着大人一起打劫，就算是后来被培养成了拳击能手，<code>一旦失去了一个长辈的在场管教</code>，他就像一块永磁铁，被打劫这一块吸铁石牢牢地吸走，重新开启旧事业。老鼠儿子会打洞，<code>人的家庭环境对其一生的影响是不可估量的</code>。你说这个拳击教练他有错吗？<code>必然有</code>，因为他插手了这些孩子们的童年和青春，所以他必须要为他们的成人做好准备。既然他是唯一一个孩子们亲近的大人，除了教他们打假赛挣钱（不寒掺！），更要给他们一些<code>心理的建设</code>，这才是支撑他们克服原生家庭的<code>唯一法宝</code>。他们重拾旧业，就是因为他们骨子里还是那个穷小子，那个没有一技傍身的“屌丝”、“愣头青”，即使他们已经在拳击行业有一些傲人的成就。我记得到最后他们也没有真正进学校上过一次学，意味着他们的学历将是“无”，虽然我也不搞学历崇拜，但是现实中如果有这么一批孩子，是多么可悲、可怜。所以，其实这整个社会都付有一定的连带责任，但是如果这个社会并不是唯学历论，我相信这群年轻的孩子肯定可以通过自己的双手打拼出来，<code>带着他们的姐姐来城市看一看世间的繁华</code>，而不是窝在阴暗的床上编手工品。</p><h3 id="探访母校：对人以诚，对事以精"><a href="#探访母校：对人以诚，对事以精" class="headerlink" title="探访母校：对人以诚，对事以精"></a>探访母校：对人以诚，对事以精</h3><p>看完电影，同学说想参观下我的初中母校，于是步行10min到达校门口。跟警卫处说明来意，他们非常乐意地开了门。我们绕了整个学校一圈，还特地去九六班看了看，怀念那时的卷王姿态啊~中午放学、下午放学我总是全班最后一个走，真想不懂那时为啥这么卷，也许就是那时的我给我现在的条件吧。应了多年前的那句网络名言“未来的你，会感谢现在努力的自己”。实话实说，在城市中心夜晚的母校，就是望着窗外睡一觉都会感觉很舒服。我可能是个灯光控吧😄。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实这个暑假还有一些小故事，比如，pubg<code>出了金</code>（烟枪，虽然没啥用，不过这是第二次免费出金了嘻嘻）；还有<code>分到了想去的人工智能专业</code>等等，不一而足。一句话概括，那就是：<br><code>这个暑假，就像一把鲜艳的画笔，每一滴墨水都深深地烙印在我人生的画卷上，为我这平淡无奇的学生生涯添上了丰富的色彩，纵使未来充满挑战，但我一定能看到希望，把握机遇。</code></p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
          <category> 规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序之反思</title>
      <link href="/2023/08/02/2023-08-01-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/08/02/2023-08-01-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>  众所周知，快速排序是一个复杂度较为低的排序，平均时间复杂度约n*log(n)，今天，我尝试对快速排序的本质做一些理解和复习。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> pointer1 = left, pointer2 = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> s = right - left + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>* help2 = <span class="keyword">new</span> <span class="type">int</span>[s];</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (pointer1 &lt;= mid &amp;&amp; pointer2 &lt;= right) &#123;</span><br><span class="line">        help2[i++] = a[pointer1] &lt; a[pointer2] ? a[pointer1++] : a[pointer2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (pointer1 &lt;= mid) &#123;</span><br><span class="line">        help2[i++] = a[pointer1++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (pointer2 &lt;= right) &#123;</span><br><span class="line">        help2[i++] = a[pointer2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; right - left + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        a[left + i] = help2[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] help2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   这是一开始的想法。取最左边的元素为<code>基准点</code>，然后j先动，直到找到<code>小于基准点</code>的那个元素；接着动i，直到找到<code>大于基准点</code>的那个元素；交换j,i的元素；像这个步骤顺序执行，直到任何一刻，<code>i == j</code>，然后，<br>交换i位置和<code>基准点</code>位置的元素。这样就能达到<code>基准点</code>左侧的数<code>小于基准点</code>，<code>基准点</code>左侧的数<code>大于基准点</code>。然后，再调用递归，分别将<code>基准点</code>左侧和右侧<code>修正</code>为面向<code>新基准点</code>的类排序<br>状态，直到这个调用结束。说实话，这有一点像深度优先搜索的例子。<br>    但是，chatgpt告诉我，它有更好的方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> pivot = arr[left];</span><br><span class="line">    <span class="type">int</span> i = left, j = right;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= pivot)</span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            arr[i++] = arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= pivot)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            arr[j--] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[i] = pivot;</span><br><span class="line">    <span class="built_in">quicksort</span>(arr, left, i - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">quicksort</span>(arr, i + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   这是gpt的思路：它一开始就不打算将arr[left]保留至原位置。当j移动到<code>小于基准点</code>的位置，原来i位置的数会被j位置的覆盖；然后i移动到<code>大于基准点</code>的位置，j位置的数于是被i位置的覆盖。如此循环，仅仅a[left]是没有<br>被放进数列的。最后当i和j相遇，不管前面是什么情况，这个相遇位置的数一定已经被移动到它应该去的地方，于是在此处写入a[left]。然后也是调用递归。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>   其实快速排序让我敬畏之许久，导致很长一段时间我都觉得这个排序很“迷”。为何？因为它的边界条件、特殊情况和执行顺序：</p><h3 id="边界条件"><a href="#边界条件" class="headerlink" title="边界条件"></a>边界条件</h3><p>   a[left]是最大的数，且整个数列是逆序的，不就会执行非常多次？<br>    确实，如果是逆序，那么是会执行n + (n-1) + (n-2) + … + 1 次，也就是冒泡排序的次数。</p><h3 id="特殊情况-执行顺序"><a href="#特殊情况-执行顺序" class="headerlink" title="特殊情况&#x2F;执行顺序"></a>特殊情况&#x2F;执行顺序</h3><p>   如果i从左至右能找到三个<code>大于基准点</code>的数，反之j从右至左能找到一个或者两个<code>小于基准点</code>的数，那么这个排序不就不成立了？这是我从一开始就很疑惑的点。不妨来举一个例子说清楚这个问题：<br><code>arr = &#123;5, 6, 7, 8, 2 , 1&#125;</code>这个数组执行代码（第一种解法）过程中，1 和 6 会被先定位，然后交换<code>arr = &#123;5, 1, 7, 8, 2 , 6&#125;</code>，接着是2，7，<code>arr = &#123;5, 1, 2, 8, 7, 6&#125;</code></p><p>接下来，就是这个排序的精华（起码我是这么认为的啦）了：永远先让j动——j移动到 “2” 的位置，与i重合。然后 5 和 2 交换，得到<code>arr = &#123;2, 1, 5, 8, 7, 6&#125;</code>，怎么样，不还是能跑嘛！</p><p>   <em><strong>其实，j 先动，就能保证j右边的全是比 j 要大的，这是最重要的一环。</strong></em></p><p>如果把 i 和 j 的移动顺序调换，上面的例子会变成<code>arr = &#123;8, 1, 2, 5, 7, 6&#125;</code>（ i 先到 8 的位置）。这样就不符合 5 左边的数都比 5 小的初衷了。因为，如果 i 先动，只能保证 i 左边的数会比 <code>基准点</code> 小，但是这个过程中一旦 i 和 j 碰面了，或者像这个例子，i右边且j左边没有小于<code>基准点</code>的数了，一定会让这个尴尬的位置非常棘手。<em><strong>究其根本的原因，<br>   就是我们规定的是左小右大的排列顺序：最后一个和a[left]交换的一定不能大于<code>基准点</code>。所以，当j先动，不可避免地遇上了i，此时的i是先前被交换过来的那个 <code>旧j</code>位置的<code>小于基准点</code>的数，当然不怕和a[left]交换位置；<br>   然而当i先动，若是不可避免地遇上了j，此时的j是先前被交换过来的那个 <code>旧i</code>位置的<code>大于基准点</code>的数，当然不能和a[left]交换位置，否则新的a[left]不就一定会&gt;<code>基准点</code>咯！</strong></em></p><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>   那么，如果左小右大，应该j先动，是不是说左大右小，就是i先动？让我们看下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> pivot = arr[left];</span><br><span class="line">    <span class="type">int</span> i = left, j = right;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &lt;= pivot)</span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            arr[i++] = arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &gt;= pivot)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            arr[j--] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[i] = pivot;</span><br><span class="line">    <span class="built_in">quicksort</span>(arr, left, i - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">quicksort</span>(arr, i + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   这是gpt给的，当然经过验证是正确的代码。我们可以看到，用这种方式，我们确实可以做到左小右大。经过今天的分析，我们能得到一个结论：i和j的移动顺序和得到的数组的要求有密切的关系：要求 &#x3D;&#x3D; 左小右大？ j 先动 : 要求 &#x3D;&#x3D; 左大右小？ : i 先动 : 俺也不知道。<br>   （容我写个嵌套三目结束今天的战斗！）</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My test blog^_^</title>
      <link href="/2023/07/29/First-blog/"/>
      <url>/2023/07/29/First-blog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>#日志<br>今天布置了网站封面，添加底部音乐元素， 增加留言板设置</p><hr><hr><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>代码测试：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>)</span><br></pre></td></tr></table></figure><p>unbelievable </p><p>图片测试：</p><p><img src="http://mculover666.cn/blog/20191031/R4mWMXsrRKxu.png?imageslim"></p><p>引用测试：</p><blockquote><p>这是一条引用</p></blockquote><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>无序列表测试：</p><ul><li>哈哈</li><li>嘿嘿</li><li>吼吼</li></ul><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
