<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>更换博客背景:不破不立!</title>
      <link href="/post/4d9c.html"/>
      <url>/post/4d9c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to Do Great Work</title>
      <link href="/post/2cc5.html"/>
      <url>/post/2cc5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><div style="text-align: center;">&gt;未完待续&gt;</div>  <a href="http://paulgraham.com/greatwork.html" target="_blank">从推上看到有人极力分享这篇文章,遂找来读读:阅读原文请点击我</a><p><em>本篇采用了粗读+gpt段式总结.</em></p><h1 id="How-to-Do-Great-Work"><a href="#How-to-Do-Great-Work" class="headerlink" title=" How to Do Great Work"></a><strong><div style="text-align: center;"> How to Do Great Work</div></strong></h1><div style="text-align: center;">July 2023</div><p>If you collected lists of techniques for doing great work in a lot of different fields, what would the intersection look like? I decided to find out by making it.</p><p>Partly my goal was to create a guide that could be used by someone working in any field. But I was also curious about the shape of the intersection. And one thing this exercise shows is that it does have a definite shape; it’s not just a point labelled “work hard.”</p><p>The following recipe assumes you’re very ambitious.  </p><blockquote><p>“以下的建议是为那些非常有野心的人准备的。”</p></blockquote><h1 id="Part-1-以好奇心启航-用努力开创新世界。🚀"><a href="#Part-1-以好奇心启航-用努力开创新世界。🚀" class="headerlink" title="Part 1 以好奇心启航, 用努力开创新世界。🚀"></a>Part 1 以好奇心启航, 用努力开创新世界。🚀</h1><details><summary>Part 1 内容</summary><p>The first step is to decide what to work on. The work you choose needs to have three qualities: it has to be something you have a natural aptitude for, that you have a deep interest in, and that offers scope to do great work.</p><blockquote><p>它必须是你天生擅长的、你深感兴趣的，并且有潜力做得出色的事情。</p></blockquote><p>In practice you don’t have to worry much about the third criterion. Ambitious people are if anything already too conservative about it. So all you need to do is <code>find something you have an aptitude for</code> and <code>great interest in</code>. [1]</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        [1]    </div>    <div class='spoiler-content'>        <p>I don’t think you could give a precise definition of what counts as great work. Doing great work means doing something important so well that you expand people’s ideas of what’s possible. But there’s no threshold for importance. It’s a matter of degree, and often hard to judge at the time anyway. So I’d rather people focused on developing their interests rather than worrying about whether they’re important or not. Just try to do something amazing, and leave it to future generations to say if you succeeded.<br>我不认为你可以给出一个精确的定义，什么是伟大的工作。做一件伟大的工作意味着把重要的事情做得很好，从而拓展了人们对可能性的看法。但重要性并没有界限。这是一个程度问题，而且通常很难在当时做出判断。所以我宁愿人们专注于发展他们的兴趣，而不是担心他们是否重要。试着去做一些令人惊叹的事情，如果你成功了，留给后代去说。</p>    </div></div><p>That sounds straightforward, but it’s often quite difficult. When you’re young you don’t know what you’re good at or what different kinds of work are like. Some kinds of work you end up doing may not even exist yet. So while some people know what they want to do at 14, most have to figure it out.</p><p>The way to figure out what to work on is by working. If you’re not sure what to work on, <code>guess</code>. But pick something and get going. You’ll probably guess wrong some of the time, but that’s fine. <code>It&#39;s good to know about multiple things</code>; <code>some of the biggest discoveries come from noticing connections between different fields.</code></p><p>Develop a habit of working on your own projects. Don’t let “work” mean something other people tell you to do. If you do manage to do great work one day, it will probably be on a project of your own. It may be within some bigger project, but you’ll be driving your part of it.</p><p>What should your projects be? Whatever seems to you excitingly ambitious. As you grow older and your taste in projects evolves, exciting and important will converge. At 7 it may seem excitingly ambitious to build huge things out of Lego, then at 14 to teach yourself calculus, till at 21 you’re starting to explore unanswered questions in physics. But always preserve excitingness.</p><p>There’s a kind of excited curiosity that’s both the engine and the rudder of great work. It will not only drive you, but if you let it have its way, will also show you what to work on.</p><p>What are you excessively curious about — curious to a degree that would bore most other people? That’s what you’re looking for.</p><p>Once you’ve found something you’re excessively interested in, the next step is to learn enough about it to get you to one of the frontiers of knowledge. Knowledge expands <code>fractally(分形)</code>, and from a distance its edges look smooth, but once you learn enough to get close to one, they turn out to be full of <code>gaps</code>.</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        fractal    </div>    <div class='spoiler-content'>        <img src="/post/2cc5/fractal.png" class="" title="fractal">分形是一种在每个尺度上都重复相同或相似模式的结构。这意味着知识的增长是层层叠叠、无穷尽的，当你深入一个主题，你会发现更多的子主题和更细节的知识。    </div></div><p>The next step is to<code> notice them</code>. This takes some skill, because your brain wants to ignore such gaps in order to make a simpler model of the world. Many discoveries have come from asking questions about things that everyone else took for granted. [2]</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        [2]    </div>    <div class='spoiler-content'>        <p>A lot of standup comedy is based on noticing anomalies in everyday life. “Did you ever notice…?” New ideas come from doing this about nontrivial things. Which may help explain why people’s reaction to a new idea is often the first half of laughing: Ha!<br>我操!你说到这个我可不困了啊! Lets Welcome Louis CK, Bill Burr and Anthony Jeselnik!</p>    </div></div><p>If the answers seem strange, <code>so much the better(岂不是更好)</code>. Great work often has a tincture of strangeness. You see this from painting to math. It would be affected to try to manufacture it, but if it appears, embrace it.</p><blockquote><p>尝试人为制造这种感觉可能会显得做作，但如果它自然出现，就拥抱它吧。</p></blockquote><p>Boldly chase outlier(与众不同) ideas, even if other people aren’t interested in them — in fact, especially if they aren’t. If you’re excited about some possibility that everyone else ignores, and you have enough expertise to say precisely what they’re all overlooking, that’s<code> as good a bet as(最好的机会)</code> you’ll find. [3]</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        [3]    </div>    <div class='spoiler-content'>        <p>That second qualifier is critical. If you’re excited about something most authorities discount, but you can’t give a more precise explanation than “they don’t get it,” then you’re starting to drift into the territory of cranks.</p><blockquote><p>小心进入”怪人”(民科&#x2F;进入非主流科学的领域)的圈子!</p></blockquote>    </div></div><p>Four steps: choose a field, learn enough to get to the frontier, notice gaps, explore promising ones. This is how practically everyone who’s done great work has done it, from painters to physicists.</p><p>Steps two and four will require hard work. It may not be possible to prove that you have to work hard to do great things, but the <code>empirical(经验主义的)</code> evidence is on the scale of the evidence for mortality. That’s why it’s essential to work on something you’re deeply interested in. Interest will drive you to work harder than mere diligence ever could.</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        but the empirical evidence is on the scale of the evidence for mortality    </div>    <div class='spoiler-content'>        <p>但是实证证据与死亡的证据同等重要。这意味着尽管不能完全确定努力一定会带来成功，但大量的事例和经验都表明，努力是通向成功的必要条件。<br>这是一个类比,在使用一个强烈的类比来突出努力工作与成功之间的关系。这里，他把努力工作带来成功的经验性证据与对人类死亡的确凿证据相提并论。换句话说，就像我们都知道每个人最终都会死亡一样，大量的经验性证据也显示努力工作往往会导致成功。这种类比方式被用来强调其观点的重要性和不可争议性。</p>    </div></div><p>The three most powerful motives are <code>curiosity</code>, <code>delight</code>, and <code>the desire to do something impressive</code>. Sometimes they <code>converge</code>, and <code>that combination is the most powerful of all.</code></p><p>The big prize is to discover a new fractal bud. You notice a crack in the surface of knowledge, pry it open, and there’s a whole world inside.</p></details><details>  <summary>Part 1 总结</summary>  寻找兴趣：选择你感到过度好奇或深感兴趣的事物，即使它可能让大多数人觉得无聊。<p>达到知识前沿：学习足够多关于你选择领域的知识，使自己达到该领域的知识前沿。</p><p>发现空白：注意那些在知识中的空白或缺口。这需要技巧和细致的观察，因为人的大脑通常会忽略这些细节。</p><p>质疑常态：对于众所周知或被视为理所当然的事物提出问题，这有时会导致重大的发现。</p><p>珍视独特性：伟大的作品往往带有一种与众不同的色彩。如果你的工作中出现了这种特质，就拥抱它。</p><p>大胆追求：不要害怕追求那些与众不同的观点或方法，尤其是当其他人不感兴趣或不同意时。</p><p>持续努力：成功往往需要不懈的努力和坚韧不拔的态度。选择一个你深感兴趣的领域会使你更加投入。</p><p>驱动力的来源：好奇心、喜悦和想要做出令人印象深刻的事情是三个最强大的驱动力。当这些元素结合在一起时，它们的力量是无穷的。</p><p>探索未知：在知识的表面找到裂缝，然后深入探索，可能会发现一个全新的世界或领域。</p></details><h1 id="Part-2-保持好奇，选择热爱，赢得未来。🍀"><a href="#Part-2-保持好奇，选择热爱，赢得未来。🍀" class="headerlink" title="Part 2 保持好奇，选择热爱，赢得未来。🍀"></a>Part 2 保持好奇，选择热爱，赢得未来。🍀</h1><details><summary>Part 2 内容</summary><p>Let’s talk a little more about the complicated business of figuring out what to work on. The main reason it’s hard is that you can’t tell what most kinds of work are like except by doing them. Which means the four steps overlap: you may have to work at something for years before you know how much you like it or how good you are at it. And in the meantime you’re not doing, and thus not learning about, most other kinds of work. So in the worst case you choose late based on very incomplete information. [4]</p><blockquote><p>(and also very little progress under the worst situation)</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        [4]    </div>    <div class='spoiler-content'>        <p>Finding something to work on is not simply a matter of finding a match between the current version of you and a list of known problems. You’ll often have to coevolve with the problem. That’s why it can sometimes be so hard to figure out what to work on. The search space is huge. It’s the cartesian product of all possible types of work, both known and yet to be discovered, and all possible future versions of you.</p><ul><li><p>与已知问题的匹配：选择工作不仅仅是在当前的你和一系列已知问题之间找到匹配。这意味着你不能仅依靠当前的知识、技能和兴趣来决定将来要做的事情。</p></li><li><p>与问题共同发展：你可能需要与所选择的问题共同进化。这意味着，当你开始研究或工作于某个问题时，你的知识、技能和兴趣可能会随之发展和变化。</p></li><li><p>搜索空间的巨大性：确定要做的事情是一个巨大的搜索过程。这里的“搜索空间”指的是所有可能的工作类型，不仅包括已知的，还有未来可能被发现的；以及所有可能的未来版本的你。换句话说，选择工作方向是在众多的工作类型和你未来可能的自身变化之间的交集中进行的。</p></li><li><p>无法搜索整个空间，所以必须依赖启发式方法来生成有希望的路径：因为不可能探索所有的工作和研究方向，所以人们需要使用一些经验法则或直觉来指导他们，希望能够找到合适的工作方向。</p></li><li><p>最好的匹配不总是聚集在一起：意味着你可能不会立刻找到完美匹配的工作。某些工作可能仅仅因为历史的偶然性而被归为一类，而不是因为它们之间有真正的相似性。</p></li></ul><blockquote><p>总的来说，作者想表达的是：选择一个工作方向是一个极为复杂的过程，涉及到未知的问题和你个人的未来发展。因此，这不是一个简单的决策，而是一个随时间、经验和自我发现而不断进化的过程。 </p></blockquote>    </div></div><p>The nature of ambition exacerbates this problem. Ambition comes in two forms, one that precedes interest in the subject and one that grows out of it. Most people who do great work have a mix, <code>and the more you have of the former, the harder it will be to decide what to do.</code></p><blockquote><p>(边做便产生兴趣!)</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        the more you have of the former, the harder it will be to decide what to do.    </div>    <div class='spoiler-content'>        <p>所以，如果你的雄心来源于对某个主题的先入之见，而不是真正的体验或了解，那么决定自己到底要做什么就会更困难。</p>    </div></div><p>The educational systems in most countries pretend it’s easy. They expect you to commit to a field long before you could know what it’s really like. <code>And as a result an ambitious person on an optimal trajectory will often read to the system as an instance of breakage(错误的实例).</code></p><div class='spoiler collapsed'>    <div class='spoiler-title'>        an instance of breakage    </div>    <div class='spoiler-content'>        <img src="/post/2cc5/educating_system.png" class="" title="educating_system">这里描述的是一个与传统教育系统相冲突的现象。即使一个人正按照自己认为最佳的、对自己最有益的轨迹前进，这可能与传统教育系统的预期不符。传统教育系统通常有一个固定的路径或预期，认为学生应该遵循某种“标准化”的学习和发展轨迹。但那些有雄心的人，即使他们走在他们自认为的最佳轨迹上，如果这个轨迹与系统的预期不符，那么系统可能会认为他们是“错误的”或“脱轨的”，即使实际上他们可能更加成功或有潜力。>ME: 其实,实际上,那些所谓一般性的路线无法照顾到每一个人,而且随着时代改变,真正能从这种"一般性路线"获益的人只占少数,对吗?<blockquote><p>GPT: 所谓的“一般性路线”或“标准路径”常常基于一种假设，即大多数人都可以或应该按照这个路径走。然而，现实中的每个人都有自己独特的背景、能力、兴趣和需求，所以这种“一般性路线”并不总是适用于每个人。特别是在一个不断变化的时代，这些既定的路径可能很快就会过时。<br>而且，随着技术进步、社会变革和全球化的深入，传统的教育和职业路径可能不再满足所有人的需求。新的机会和领域不断出现，而那些固守传统路径的人可能会错过这些机会<br>另外，个人的满足感和成就感并不总是与所谓的“成功”的传统标准相吻合。有些人可能会在非传统的路径上找到他们的激情和满足感。<br>总的来说，尽管“一般性路线”为许多人提供了一个明确的方向和稳定的预期，但随着时间的推移和个体差异的存在，这些路径可能并不总是最佳选择。这就是为什么个人的自我探索和对自己的理解变得如此重要，因为这可以帮助人们找到真正适合他们的路径。</p></blockquote><blockquote><p>ME: 我觉得这确实像原文一样,不是每个人的错,是这个世界的错.从一开始,学校(起码中国的公立学校)就没有要把学生培养成有个性的人,而是教条,归一化.这由不得普通人做主.绝大部分人,当他们真正意识到这一点,绝对已经晚了.</p></blockquote><blockquote><p>GPT: 你的观察在很大程度上反映了许多教育系统，尤其是那些高度标准化的系统，如中国的公立学校系统，在处理学生个体性方面的挑战。这种“一刀切”的教育模式确实有其根本的问题。<br>无法满足每个人的需求：每个人都有不同的学习风格、兴趣和能力，但传统的教育系统往往采用统一的方法来教育所有学生，这可能会导致某些学生失去学习的兴趣和动力。<br>压抑创新和批判性思维：在一个重视考试分数和标准答案的教育环境中，学生可能会失去对探索、创新和独立思考的兴趣。<br>生活和职业规划的压力：许多学生被期望按照特定的路径（例如，进入一所好大学，然后找到一份好工作）进行生活和职业规划，这可能会限制他们探索其他可能的路径和兴趣。<br>社会和文化压力：在某些社会和文化背景下，追求非传统的职业或兴趣可能会被视为“与众不同”或“不正常”。<br>然而，随着社会的进步和技术的发展，越来越多的人开始意识到这种教育模式的局限性，并寻求改变。例如，很多国家和地区正在尝试实施更加灵活和以学生为中心的教育模式。同时，互联网和技术也为学生提供了更多的资源和平台来探索他们的兴趣和激情。<br>尽管如此，改变一个深入人心的系统和观念需要时间。对于那些意识到这一问题但感到为时已晚的人，重要的是记住，学习和成长是一生的旅程，永远不会太晚去探索新的兴趣和机会。  </p></blockquote>    </div></div><p>It would be better if they at least admitted it — if they admitted that the system not only can’t do much to help you figure out what to work on, but is designed on the assumption that you’ll somehow magically guess as a teenager(hilarious). They don’t tell you, but I will: <code>when it comes to figuring out what to work on, you&#39;re on your own.</code> Some people get lucky and do guess correctly, but <code>the rest will find themselves scrambling diagonally across tracks laid down on the assumption that everyone does.</code></p><div class='spoiler collapsed'>    <div class='spoiler-title'>        the rest will find themselves scrambling diagonally across tracks laid down on the assumption that everyone does.    </div>    <div class='spoiler-content'>        <p>这里的”scrambling diagonally across tracks”意味着那些没有幸运正确猜到自己工作方向的人会发现自己在人生的轨迹上摸索、走弯路，尝试找到自己的位置，而这些“轨迹”则是基于一个预设的假设——所有人都应该遵循一致的路径。</p>    </div></div><p>What should you do if you’re young and ambitious but don’t know what to work on? What you should not do is drift along passively, assuming the problem will solve itself. You need to take action. But there is no systematic procedure you can follow. When you read<code> biographies</code> of people who’ve done great work, it’s remarkable how much luck is involved. They discover what to work on as a result of a chance meeting, or by reading a book they happen to pick up. So you need to <code>make yourself a big target for luck</code>, and the way to do that is to <code>be curious</code>. <code>Try lots of things</code>, <code>meet lots of people</code>, <code>read lots of books</code>, <code>ask lots of questions</code>. [5]</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        [5]    </div>    <div class='spoiler-content'>        <p>There are many reasons curious people are more likely to do great work, but one of the more subtle is that, by casting a wide net, they’re more likely to <code>find the right thing</code> to work on <code>in the first place.</code></p>    </div></div><p>When in doubt, optimize(优先) for interestingness. Fields change as you learn more about them. What mathematicians do, for example, is very different from what you do in high school math classes. So you need to give different types of work a chance <code>to show you what they&#39;re like</code>. But a field <code>should become increasingly interesting</code> as you learn more about it. <code>If it doesn&#39;t, it&#39;s probably not for you.</code></p><p>Don’t worry if you find you’re interested in different things than other people. The stranger your tastes in interestingness, the better. Strange tastes are often strong ones, and a strong taste for work means you’ll be productive. And you’re more likely to find new things if you’re looking where few have looked before.</p><blockquote><p>不要担心兴趣偏门</p></blockquote><p>One sign that you’re suited for some kind of work is when you like even the parts that other people find <code>tedious(乏味)</code> or frightening.</p><p>But fields aren’t people; you don’t owe them any loyalty. If in the course of working on one thing you discover <code>another</code> that’s <code>more exciting</code>, don’t be afraid to <code>switch</code>.</p><blockquote><p>你不欠它们任何忠诚。</p></blockquote><p>If you’re making something for people, make sure it’s something they actually want. The best way to do this is to make something you yourself want. Write the story you want to read; build the tool you want to use. Since your friends probably have similar interests, this will also get you your initial audience(初步受众).</p><p>This should follow from the excitingness rule. Obviously the most exciting story to write will be the one you want to read. The reason I mention this case explicitly is that so many people get it wrong. Instead of making what they want, <code>they try to make what some imaginary</code>, <code>more sophisticated audience wants.</code> And once you go down that route, you’re lost. [6]</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        [6]    </div>    <div class='spoiler-content'>        <p>It can also be dangerous to make things for an audience you feel is less sophisticated than you, if that causes you to talk down to them. You can make a lot of money doing that, if you do it in a sufficiently cynical way, but it’s not the route to great work. Not that anyone using this m.o. would care.</p><p>　　为认为比自己“不够成熟”的受众制作东西可能是危险的：当你觉得自己的受众不如你知识渊博或不够复杂时，很容易采取一种高人一等的态度，从而贬低他们。这可能导致你的作品失去深度和真实性。</p><p>　　通过这种方式可以赚很多钱：尽管贬低受众可能会损害创作者的艺术品质和真实性，但这种策略如果以足够的犬儒主义态度来执行，可能会非常受欢迎，从而为创作者带来大量的利润。</p><p>　　但这不是通往伟大作品的路：虽然这种策略可能会短期带来金钱和名声，但它不会产生真正有深度、有价值和有持久影响力的作品。</p><p>　　不是每个使用此策略的人都关心这一点：作者指出，那些愿意走这条路的人可能并不真心关心他们的作品是否达到了伟大的标准。</p><p>ME: m.o.是什么意思?<br>GPT:<br>在这里，”m.o.” 是 “modus operandi” 的缩写，这是一个拉丁词汇，直译为”操作方式”。在常规英语中，它通常指的是一个人或组织的典型行为方式或操作方法。</p><p>因此，文中的 “Not that anyone using this m.o. would care.” 可以理解为：”那些采用这种行为模式的人可能并不真的关心（伟大的作品）”。</p>    </div></div><div class='spoiler collapsed'>    <div class='spoiler-title'>        more sophisticated audience wants    </div>    <div class='spoiler-content'>        <p>这句话描述了一些创作者不是为了自己或真实的受众制作内容，而是为了满足他们想象中更高级、更复杂的受众的需求和口味。这通常意味着他们为了追求这个虚构的受众而失去了自己的真实声音和创造力。</p>    </div></div><p>There are a lot of forces that will lead you <code>astray(adv, 迷路, 走失)</code> when you’re trying to figure out what to work on. <code>Pretentiousness(自命不凡/矫揉造作)</code>, fashion, fear, money, politics, other people’s wishes, <code>eminent frauds</code>. But if you stick to what you find genuinely interesting, <code>you&#39;ll be proof against all of them</code>. If you’re interested, you’re not astray.</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        eminent frauds    </div>    <div class='spoiler-content'>        <p>“eminent frauds”可能指的是那些在社会上有高度声誉或知名度的人，但实际上他们的声誉是基于虚假或不真实的成就。这些人可能会误导他人，因为他们的声誉和影响力可能使他们的观点和建议看起来更有吸引力或可信度，即使这些建议不一定是正确的或有益的。</p>    </div></div></details><h1 id=""><a href="#" class="headerlink" title=""></a></h1><details>  <summary>Part 2 总结</summary>你只有通过亲身体验才能了解大多数工作的真实性质。    雄心壮志存在两种形式，而这两者都会影响你的决策。    大多数教育系统预设你在真正了解一个领域之前就为其做出承诺。    对于选择工作方向，每个人都需要独立思考。系统不能为你做决策。    运气在决定工作方向中扮演了重要角色。为了吸引好运，应保持好奇心、广泛探索和阅读。  当面临选择时，选择那些对你来说真正有趣的领域。  一个领域应随着你对其了解的增加而变得越来越有趣。  不应担心自己的兴趣与众不同。有特殊兴趣的人更可能产出杰出的成果。  即使在某一领域投入了很多，如果发现其他领域更有吸引力，也不应害怕转行。  当为人们创造东西时，最好是满足自己的需求。因为制造你自己想要的东西最有可能满足他人的需求。  当你追求真正对你有意义的事情时，你可以抵御外部干扰和误导。  <p>简言之，选择工作方向是一个综合考虑兴趣、热情、经验和运气的过程。为了做出最佳决策，应保持开放心态，尽可能多地探索和学习。</p></details><h1 id="Part-3-工作的艺术：真实、持续、独特。✨"><a href="#Part-3-工作的艺术：真实、持续、独特。✨" class="headerlink" title="Part 3: 工作的艺术：真实、持续、独特。✨"></a>Part 3: 工作的艺术：真实、持续、独特。✨</h1><details>  <summary>Part 3 内容</summary><p>Even when you’ve found something exciting to work on, working on it is not always straightforward. There will be times when some new idea makes you <code>leap out of bed</code> in the morning and <code>get straight to work.</code> But there will also be plenty of times when things <code>aren&#39;t like that</code>.</p><p>You don’t just put out your sail and get blown forward by inspiration. There are headwinds and currents and hidden shoals. So there’s a technique to working, just as there is one to sailing.</p><p>For example, while you must work hard, it’s possible to work too hard, and if you do that you’ll find you get <code>diminishing returns</code>: <code>fatigue </code>will make you stupid, and eventually even damage your health. <code>The point at which work yields diminishing returns depends on the type. </code>Some of the hardest types you might only be able to do for <code>four or five hours a day</code>.</p><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <p>不明确的主语：“The point”这个主语在本句中是模糊的，它指的是“什么样的点”或“什么时候的点”不够明确。</p><p>不明确的宾语：“the type”没有明确说明是什么类型。是工作的类型，工作强度，还是其他类型？对于没有上下文的读者来说，这个“type”是不明确的。</p><p>句子结构：整个句子的结构使其听起来有些啰嗦。其实，这句话可以更简洁地表达相同的意思。</p><p>重构后的句子:<br>The point of diminishing returns varies with the type of work.<br>diminishing returns:递减收益<br>The company experienced diminishing returns as they continued to invest in the project.<br>After working for 10 hours straight I started to experience diminishing returns and my productivity decreased significantly.</p>    </div></div><blockquote><p>身体是革命的本钱! 要注意身体! 每天睡眠时间 &gt; 7 &amp;&amp; &lt; 9.5 &amp;&amp; 保证午休 !</p></blockquote><p>Ideally those hours will be contiguous. To the extent you can, try to <code>arrange your life</code> so that you <code>have big blocks of time to work in</code>. <code>You&#39;ll shy away from hard tasks if you know you might be interrupted.</code></p><div class='spoiler collapsed'>    <div class='spoiler-title'>        mark!    </div>    <div class='spoiler-content'>        <p>理想的情况下，这些小时应该是连续的。尽量安排你的生活，让你有大块的时间来工作。如果你知道可能会被打断，你会回避困难的任务。</p>    </div></div><p>It will probably be harder to <code>start working than to keep working</code>. You’ll often have to <code>trick yourself to</code> get over that <code>initial threshold(门槛)</code>. Don’t worry about this; it’s the nature of work, not a flaw in your character. Work has a sort of activation energy, both per day and per project. And since this threshold is fake in the sense that it’s higher than the energy required to keep going, it’s ok to tell yourself a lie of corresponding magnitude to get over it.</p><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <p>你往往要欺骗自己以至于开始!但是,”开始”至关重要!太对了!化学反应中的”激活能”!<br>这个门槛在某种意义上比继续前进所需的能量高，为了跨越它，你可以告诉自己一个同样大小的谎言。</p>    </div></div><p><code>It&#39;s usually a mistake to lie to yourself if you want to do great work, but this is one of the rare cases where it isn&#39;t. </code>When I’m reluctant to start work in the morning, <code>I often trick myself by saying &quot;I&#39;ll just read over what I&#39;ve got so far.&quot;</code> Five minutes later I’ve found something that seems mistaken or incomplete, and I’m off.</p><blockquote><p>我经常骗自己说：“我只是看看我到目前为止做了什么。”五分钟后，我发现了某个错误或不完整的地方，然后我开始了。</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <p>这句话“It’s usually a mistake to lie to yourself if you want to do great work, but this is one of the rare cases where it isn’t.” 可以分为两部分来理解。让我们逐一分析：</p><p>It’s usually a mistake to lie to yourself if you want to do great work：</p><p>这部分的句子是说，如果你想要完成出色的工作，通常向自己说谎是个错误。这可能意味着，为了达到高效的工作效果或产出，一个人应该对自己诚实，真实地面对自己的能力和局限性。</p><p>but this is one of the rare cases where it isn’t：</p><p>但这是其中的一个罕见的例外情况。这意味着，在某些特定的情境下，向自己说谎或者骗自己实际上可能是有益的或不会导致负面后果。</p><p>这句话中的 “this” 指的是后文将要描述的特定情境或例子，也就是作者早上不愿工作时如何骗自己来开始工作的情境。</p><p>如果我们希望使其更加直接和清晰，可以考虑重构这个句子。以下是重构后的可能版本：</p><p>“Though lying to yourself is usually detrimental to producing great work, there are rare instances where it can be beneficial. Here’s an example.”<br>“Lying to yourself typically hinders great work. However, in some rare cases, like the one I’m about to describe, it doesn’t.”</p>    </div></div><p>Similar techniques work for starting new projects. It’s ok to lie to yourself about how much work a project will entail(需要), for example. Lots of great things began with someone saying<code> &quot;How hard could it be?&quot;</code></p><p>This is one case where the young have an advantage. They’re more optimistic, and even though one of the <code>sources of their optimism is ignorance(他们的乐观来源于无知)</code>, in this case ignorance can sometimes beat knowledge(无知有时甚至可以打败知识).</p><p><code>Try to finish what you start,</code> though, even if it turns out to be more work than you expected. Finishing things is not just an exercise in tidiness or self-discipline. In many projects <code>a lot of the best work happens in what was meant to be the final stage.</code></p><blockquote><p>既然开始了,就做下去吧!</p></blockquote><p>Another permissible lie is to <code>exaggerate the importance of what you&#39;re working on</code>, at least in your own mind. If that helps you discover something new, it may turn out not to have been a lie after all. [7]</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        [7]    </div>    <div class='spoiler-content'>        <p>This idea I learned from Hardy’s A Mathematician’s Apology, which I recommend to anyone ambitious to do great work, in any field.</p>    </div></div><p>Since there are two senses of starting work — <code>per day and per project</code> — there are also two forms of<code> procrastination(拖延)</code>. <code>Per-project procrastination is far the more dangerous.</code> You put off starting that ambitious project from year to year because the time isn’t quite right. When you’re procrastinating in units of years, you can get a lot not done. [8]  </p><blockquote><p>相比于每日开始做事的拖延,项目的拖延更加严重和可怕!(因为只要不开始就永远也不会开始…)</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        [8]    </div>    <div class='spoiler-content'>        <p>Just as we overestimate what we can do in a day and underestimate what we can do over several years, we overestimate the damage done by procrastinating for a day and underestimate the damage done by procrastinating for several years.</p>    </div></div></blockquote><p>One reason per-project procrastination is so dangerous is that it usually camouflages itself as work. You’re not just sitting around doing nothing; you’re working industriously on something else. So per-project procrastination doesn’t set off the alarms that per-day procrastination does. You’re too busy to notice it.</p><blockquote><p>项目的拖延不会显性地提醒你!所以它会伪装!</p></blockquote><p>The way to beat it is to stop occasionally and ask yourself: “Am I working on what I most want to work on?”. When you’re young it’s ok if the answer is sometimes no, but <code>this gets increasingly dangerous as you get older. </code>[9]</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        [9]    </div>    <div class='spoiler-content'>        <p>[9] You can’t usually get paid for doing exactly what you want, especially early on. There are two options: get paid for doing work close to what you want and hope to push it closer, or get paid for doing something else entirely and do your own projects on the side. Both can work, but both have drawbacks: in the first approach your work is compromised by default, and in the second you have to fight to get time to do it.</p>    </div></div><p>Great work usually entails spending what would seem to most people an unreasonable amount of time on a problem. You <code>can&#39;t think of this time as a cost</code>, or it will seem too high. You have to find the work sufficiently engaging as it’s happening.</p><blockquote><p>上道了就不要担心”浪费时间”.<br>时间是只个社交观念:<a href="https://twitter.com/mike_d1213/status/1693567516822712812?s=09" target="_blank">时间观</a></p></blockquote><p>There may be some jobs where you have to work diligently for years at things you hate before you get to the good part, but this is not how great work happens. Great work happens by focusing consistently on something you’re<code> genuinely interested in</code>. When you pause to take stock, you’re surprised how far you’ve come.</p><blockquote><p>当你暂停回顾时，你会惊讶地发现自己已经走得很远了。</p></blockquote><p>The reason we’re surprised is that we underestimate the <code>cumulative effect(累积效应)</code> of work. Writing a page a day doesn’t sound like much, but if you do it every day you’ll write a book a year. That’s the key: consistency. People who do great things <code>don&#39;t get a lot done every day</code>. <code>They get something done, rather than nothing.</code></p><blockquote><p>他们确保每天都有所产出，而不是一事无成。<br>确保产出!</p></blockquote><p>If you do work that <code>compounds</code>, you’ll get exponential(指数级的) growth. Most people who do this do it unconsciously, but it’s worth stopping to think about. Learning, for example, is an instance of this phenomenon: <code>the more you learn about something, the easier it is to learn more.</code> Growing an audience is another: <code>the more fans you have, the more new fans they&#39;ll bring you.</code></p><p>The trouble with exponential growth is that the <code>curve feels flat in the beginning</code>. It isn’t; it’s still a wonderful exponential curve. But we can’t grasp that intuitively(直觉地), so we underrate exponential growth in its early stages.</p><blockquote><p>开始慢真的不要紧!</p></blockquote><p>Something that grows exponentially can become so valuable that it’s worth making an extraordinary effort to get it started. But since we underrate exponential growth early on, this too is mostly done unconsciously: people <code>push through(付出额外的努力)</code> the initial, unrewarding phase of learning something new because they know from experience that learning new things always takes an initial push, or they grow their audience one fan at a time because they have nothing better to do. If people consciously realized they could invest in exponential growth, many more would do it.</p><p>Work doesn’t just happen when you’re trying to. There’s a kind of <code>undirected thinking (无目的的思考)</code>you do when walking or taking a shower or lying in bed that can be very powerful. By letting your mind wander a little, you’ll often solve problems you were unable to solve by frontal attack.</p><p>You have to be working hard in the normal way to benefit from this phenomenon, though. You can’t just walk around daydreaming. The daydreaming has to <code>be interleaved with(交织在一起)</code> deliberate work that <code>feeds it questions.</code> [10]</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        [10]    </div>    <div class='spoiler-content'>        <p>If you set your life up right, it will deliver the focus-relax cycle automatically. The perfect setup is an office you work in and that you walk to and from.</p><blockquote><p>提前安排好工作很重要!</p></blockquote>    </div></div><p>Everyone knows to avoid distractions at work, but it’s also important to avoid them in the other half of the cycle. When you let your mind wander, it wanders to whatever you care about most at that moment. So avoid the kind of distraction that pushes your work out of the top spot, or you’ll waste this valuable type of thinking on the distraction instead. (Exception: Don’t avoid love.)</p><blockquote><p>思绪飘逸也不能被干扰(这也要求太高了吧!)</p></blockquote><p>Consciously cultivate your taste in the work done in your field. <code>Until you know which is the best and what makes it so, you don&#39;t know what you&#39;re aiming for.</code></p><blockquote><p>在品味方面,追求卓越</p></blockquote><p>And that is what you’re aiming for, because if you don’t try to be the best, you won’t even be good. This observation has been made by so many people in so many different fields that it might be worth thinking about why it’s true. <code>It could be because ambition is a phenomenon where almost all the error is in one direction — where almost all the shells that miss the target miss by falling short.</code> Or it could be because ambition to be the best is a qualitatively different thing from ambition to be good. Or maybe being good is simply too vague a standard. Probably all three are true. [11]</p><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <p>解释标注的句子：</p><p>“It could be because ambition is a phenomenon where almost all the error is in one direction — where almost all the shells that miss the target miss by falling short.”</p><p>这句话使用了一个军事或射击比赛的比喻来解释为什么人们可能没有达到他们的目标或抱负。这里的”shells”可以理解为炮弹或子弹，代表了尝试或努力。</p><p>当说“almost all the error is in one direction”时，意思是大多数人在追求自己的目标或抱负时，常常是偏低估或不足的，而不是过度估计或超越。</p><p>换句话说，当人们没有达到他们的目标时，这通常(几乎所有情况都)是因为他们没有尽全力或努力得不够，而不是因为他们过于努力或目标过高。</p><p>三种可能性的重述：</p><p>可能是因为抱负或雄心是一种现象，在这种现象中，几乎所有的错误或不足都偏向一个方向——即大多数未达到目标的尝试都是因为努力不够，而非努力过头。<br>也可能是因为渴望成为最好和仅仅渴望变得更好在质的上是完全不同的两种抱负。换言之，追求卓越与追求平均水平的抱负在根本上有所不同。<br>或者，可能是因为“好”这个标准本身就太模糊，没有明确的目标或标准来衡量或追求。<br>这三个可能性都试图解释为什么只有当人们努力成为最好时，他们才可能达到“好”的标准。  </p>    </div></div><div class='spoiler collapsed'>    <div class='spoiler-title'>        [11]    </div>    <div class='spoiler-content'>        <p>There may be some very unworldly people who do great work without consciously trying to. If you want to expand this rule to cover that case, it becomes: Don’t try to be anything except the best.</p>    </div></div><p>Fortunately there’s a kind of economy of scale here. Though it might seem like you’d be taking on a heavy burden by trying to be the best, in practice you often end up <code>net ahead(获益)</code>. It’s exciting, and also <code>strangely liberating(奇妙的解放)</code>. It simplifies things. In some ways it’s easier to try to be the best one than to try merely to be good one.</p><p>One way to aim high is to try to make something that people will care about <code>in a hundred years</code>. Not because their opinions matter more than your contemporaries’, but because something that still seems good in a hundred years is more likely to be genuinely good.</p><p>Don’t try to work in a distinctive style. Just try to do the best job you can; you won’t be able to help doing it in a distinctive way.</p><blockquote><p>“做到最好”是首要目标</p></blockquote><p>Style is doing things in a distinctive way without trying to. Trying to is affectation(做作).</p><p>Affectation is in effect to pretend that someone other than you is doing the work. You adopt an impressive but fake persona(伪装), and while you’re pleased with the impressiveness, the fakeness is what shows in the work. [12]</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        [12]    </div>    <div class='spoiler-content'>        <p>This gets more complicated in work like acting, where the goal is to adopt a fake persona. But even here it’s possible to be affected. Perhaps the rule in such fields should be to avoid unintentional affectation.</p>    </div></div><p>The temptation to be someone else is greatest for the young. They often feel like nobodies. But you never need to worry about that problem, because it’s self-solving if you work on sufficiently ambitious projects. If you succeed at an ambitious project, you’re not a nobody; you’re the person who did it. So just do the work and your identity will take care of itself.</p><blockquote><p>对年轻人来说，成为他人的诱惑最大。</p></blockquote></details><details>  <summary>Part 3 总结</summary>   投入时间：为了达到卓越的成果，必须投入大量的时间，超出常人的预期，专注于你真正感兴趣的事情。<p>持续性与累积效应：日常的小努力会累积起来产生大的影响。持续性是关键，每天都要有所产出。</p><p>指数增长的力量：工作的复合效果会导致指数级的增长，但在初期可能会感觉很平坦。要有远见，识别并投资于具有指数增长潜力的事物。</p><p>思维的交替：专注工作与让思绪自由飘逸的间隙可以帮助解决问题。避免干扰，确保你的头脑在最需要的时候集中于工作。</p><p>追求卓越：要了解你领域中的最高标准，并将其作为目标。尝试做出在长远将受到尊重和关注的事情。</p><p>独特性和风格：真正的风格是自然而然的，而不是刻意的。尽量做到最好，你的独特风格会自然显现。</p><p>避免做作和模仿：真正的创新和出色的工作来自真实的自我，而不是模仿他人或采取一种做作的态度。</p><p>综上所述，要实现卓越的工作，关键在于持续性、真实性、投入和对卓越的追求。</p></details> <h1 id="Part-4-去杂留真，每一步都是自我发现的旅程。🔥"><a href="#Part-4-去杂留真，每一步都是自我发现的旅程。🔥" class="headerlink" title="Part 4 去杂留真，每一步都是自我发现的旅程。🔥"></a>Part 4 去杂留真，每一步都是自我发现的旅程。🔥</h1><details>  <summary>Part 4 内容</summary><p>“Avoid affectation” is a useful rule so far as it goes, but how would you express this idea positively? How would you say what to be, instead of what not to be? The best answer is <code>earnest</code>. If you’re earnest you avoid not just affectation but a whole set of similar vices.</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        earnest    </div>    <div class='spoiler-content'>        <p>我理解:找到本我.只做自己.<br>只是迫于各种原因, 人们要么一辈子也找不到, 要么就算找到了也没什么机会做自己. 特别是在一个互害,互卷的社会,想啥呢,做梦.</p>    </div></div><p>The core of being earnest is being intellectually honest(心智的城市). We’re taught as children to be honest as an unselfish virtue — as a kind of <code>sacrifice</code>. But in fact it’s <code>a source of power</code> too. To see new ideas, you need an exceptionally sharp eye for the truth. You’re trying to see more truth than others have seen so far. And how can you have a sharp eye for the truth if you’re intellectually dishonest?</p><blockquote><p>心智诚实是有敏锐的洞察力的前提.</p></blockquote><p>One way to avoid intellectual dishonesty is to maintain a slight positive pressure in the opposite direction. Be aggressively willing to <code>admit that you&#39;re mistaken</code>. Once you’ve admitted you were mistaken about something, you’re free. Till then you have to carry it. [13]</p><p>Another more subtle component of earnestness is <code>informality</code>. Informality is much more important than its grammatically negative name implies. It’s not merely the absence of something. It means focusing on what matters instead of what doesn’t.</p><p>What formality and affectation have in common is that as well as doing the work, you’re <code>trying to seem </code>a certain way as you’re doing it. <code>But any energy that goes into how you seem comes out of being good(但是，用在你的外观上的任何能量都会减少你的实际能力。).</code> That’s one reason nerds have an advantage in doing great work: they <code>expend little effort on seeming anything</code>. In fact that’s basically the definition of a nerd.</p><p>Nerds have a kind of innocent boldness that’s exactly what you need in doing great work. It’s <code>not learned(不是后天习得的)</code>; it’s preserved from childhood. So hold onto it. Be the one who puts things out there rather than the one who sits back and offers sophisticated-sounding criticisms of them(指代nerds 提出的 things). “It’s easy to criticize” is true in the most literal sense, and the route to great work is never easy.</p><p>There may be some jobs where it’s an advantage to be cynical and pessimistic, but if you want to do great work it’s an advantage to be optimistic, even though that means you’ll risk looking like a fool sometimes. There’s an old tradition of doing the opposite. The Old Testament says it’s better to keep quiet lest you look like a fool. But that’s advice for seeming smart. <code>If you actually want to discover new things, it&#39;s better to take the risk of telling people your ideas.(make your ideas known.)</code></p><p>Some people are naturally earnest, and with others it <code>takes a conscious effort(需要刻意努力)</code>. Either kind of earnestness will suffice. But I doubt it would be possible to do great work without being earnest. It’s so hard to do even if you are. <code>You don&#39;t have enough margin for error to accommodate the distortions introduced by being affected, intellectually dishonest, orthodox, fashionable, or cool.</code> [14]</p><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <p>You don’t have enough margin for error：你没有足够的错误容忍范围。也就是说，在追求高品质或重要的工作时，犯错的余地非常小。</p><p>to accommodate the distortions：来容纳或容忍那些扭曲或误导。”distortions”在这里指的是由于错误观念或态度导致的偏差或误导。</p><p>introduced by being affected：受到做作的影响所引入的。”affected”在这里指的是做作的、不真实的。</p><p>intellectually dishonest：智力上的不诚实。这可能意味着故意忽略某些事实或逻辑，以便适应某种观点或信仰。</p><p>orthodox：传统的、固执己见的。这意味着过于坚持某种观点或方法，不愿意尝试或接受新的方法。</p><p>fashionable：追求时尚或流行。这可能指的是盲目追求当前的流行趋势，而不是真正有效或有价值的方法。</p><p>or cool：或追求“酷”。这意味着过于追求看起来很酷或受欢迎的事物，而不是真正有意义或价值的事物。</p>    </div></div><p>Great work is consistent not only with who did it, but<code> with itself</code>. It’s usually <code>all of a piece</code>. So if you face a decision in the middle of working on something, ask which choice is <code>more consistent</code>.</p><blockquote><p>和前面的工作保持一致</p></blockquote><p>You may have to throw things away and redo them. You won’t necessarily have to, but you have to be willing to. And that can take some effort; when there’s something you need to redo, <code>status quo bias(现状偏见,倾向于保持现状)</code> and laziness will combine to <code>keep you in denial about it</code>. To beat this ask: <code>If I&#39;d already made the change, would I want to revert to what I have now?(想象一下改变后的样子,看看哪个更好.)</code></p><p>Have the confidence to cut. Don’t keep something that doesn’t fit <code>just because you&#39;re proud of it(你的&quot;proud&quot;不值一提)</code>, or <code>because it cost you a lot of effort(你的&quot;effort&quot;不值一提)</code>.</p><p>Indeed, in some kinds of work it’s good to strip whatever you’re doing <code>to its essence</code>. The result will be more concentrated; you’ll understand it better; and you won’t be able to lie to yourself about whether there’s anything real there.</p><p>Mathematical elegance may sound like a mere metaphor, drawn from the arts. That’s what I thought when I first heard the term “elegant” applied to a proof. But now I suspect it’s conceptually prior — that the main ingredient in artistic elegance is mathematical elegance. At any rate it’s a useful standard well beyond math.</p><p>Elegance can be a long-term bet, though. Laborious solutions will often have more prestige in the short term. They cost a lot of effort and they’re hard to understand, both of which impress people, at least temporarily.</p><blockquote><p>费力的工作不一定真的对得起给它的过于正面评价, 要追求”优雅”的解决方案.</p></blockquote><p>Whereas some of the very best work will seem like it took comparatively little effort, because it was in a sense already there. It didn’t have to be built, just seen. <code>It&#39;s a very good sign when it&#39;s hard to say whether you&#39;re creating something or discovering it.</code></p><p>When you’re doing work that could be seen as either creation or discovery, err on the side of discovery. Try thinking of yourself as a mere conduit through which the ideas take their natural shape.</p><blockquote><p>我只是一个”通道”</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <p>讨论了创作与发现之间的界限，以及在进行某项工作时我们如何看待自己和我们的成果。</p><p>“Whereas some of the very best work will seem like it took comparatively little effort, because it was in a sense already there.”</p><p>这句话的意思是，有些非常出色的作品看起来似乎很轻松就完成了，因为在某种意义上它已经存在。也就是说，这些作品或想法实际上并不是从零开始，而是基于现有的知识、理论或概念。</p><p>“It didn’t have to be built, just seen.”</p><p>这意味着这些出色的作品或想法不需要从头构建，只需要“看到”或识别它。也就是说，真正的创新可能是在看待已知事物的新方式，而不一定是完全新的发明或创意。</p><p>“It’s a very good sign when it’s hard to say whether you’re creating something or discovering it.”</p><p>如果你很难判断自己是在“创造”还是在“发现”某个东西，那么这实际上是一个好兆头。这意味着你所做的事情是原创的，但同时又与已知的知识或现象紧密相关。</p><p>“When you’re doing work that could be seen as either creation or discovery, err on the side of discovery.”</p><p>当你进行的工作既可以被视为“创造”也可以被视为“发现”时，作者建议我们更倾向于“发现”的方面。这意味着，在研究或探索过程中，我们应该更多地考虑自己是如何发现或揭示已有的事实、理论或模式，而不是完全从零开始。</p><p>“Try thinking of yourself as a mere conduit through which the ideas take their natural shape.”</p><p>作者建议，我们应该将自己视为一个导管或渠道，让想法自然地流动和形成，而不是强迫或制造想法。这种看法鼓励我们保持开放和谦逊的态度，让想法自由流动，而不是试图控制或限制它们。</p><p>总的来说，这些句子鼓励人们在进行创新工作时，更加注重发现和理解现有的知识，而不是试图从头开始。这不仅可以使工作更加高效，还可以使其更有深度和意义。</p>    </div></div><p>(Strangely enough, one exception is the problem of choosing a problem to work on. This is usually seen as search, but in the best case it’s more like creating something. In the best case you create the field in the process of exploring it.)</p><p>Similarly, if you’re trying to build a powerful tool, make it <code>gratuitously unrestrictive(工具越强大越好)</code>. <code>A powerful tool almost by definition will be used in ways you didn&#39;t expect, so err on the side of eliminating restrictions, even if you don&#39;t know what the benefit will be.</code></p><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <p>当你试图构建一个强大的工具时，应该使其尽量不受限制，即使你不知道这样做的好处是什么。</p><p>我们可以分解一下来更深入地理解：</p><p>Similarly, if you’re trying to build a powerful tool, make it gratuitously unrestrictive.</p><p>词语 “gratuitously unrestrictive” 的直译是“无故地、无需原因地不加限制”。这里的意思是，即使没有明确的原因，也要使工具尽可能不受限制，为使用者提供最大的自由度。<br>A powerful tool almost by definition will be used in ways you didn’t expect,</p><p>这句话意味着，一个强大的工具本身的定义或特性就意味着它可能会被用于你未曾预期的方式。也就是说，真正强大的工具具有多种潜在的用途，这些用途可能超出了设计者的最初想法或预期。<br>so err on the side of eliminating restrictions, even if you don’t know what the benefit will be.</p><p>这部分的建议是，为了使工具能够充分发挥其潜在用途，你应该尽量减少或消除对其使用的任何限制。即使你不知道这样做的具体好处是什么，也应该这样做，因为这可以确保工具的使用不受约束，并可能产生出乎你意料的好处。<br>总的来说，作者建议当你创建一个强大的工具时，应该让它尽量开放和不受限制，因为这样可以确保工具的<code>潜在价值得到最大的发挥</code>.</p>    </div></div><p>Great work will often be tool-like in the sense of being something others build on. So it’s a good sign if you’re creating ideas that others could use, or exposing questions that others could answer. The best ideas have implications <code>in many different areas.</code></p><p>If you <code>express your ideas in the most general form</code>, they’ll be truer than you intended.</p><p>True by itself is not enough, of course. Great ideas have to be <code>true and new</code>. And it takes a certain amount of ability to see new ideas even once you’ve learned enough to get to one of the frontiers of knowledge.</p><p>In English we give this ability names like originality, creativity, and imagination. And it seems reasonable to give it a separate name, because it does seem to some extent <code>a separate skill</code>. It’s possible to have a great deal of ability in other respects — to have a great deal of what’s often called “technical ability” — and yet not have much of this.</p><p>I’ve never liked the term “creative process.” It seems misleading. Originality isn’t a process, but a habit of mind. Original thinkers <code>throw off new ideas about whatever they focus on</code>, like an angle grinder throwing off sparks. They can’t help it.</p><p>If the thing they’re focused on is something they don’t understand very well, these new ideas might not be good. One of the most original thinkers I know decided to focus on dating after he got divorced. He knew roughly as much about dating as the average 15-year-old, and the results were spectacularly colorful. <code>But to see originality separated from expertise like that made its nature all the more clear.</code></p><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <p>这句话 But to see originality separated from expertise like that made its nature all the more clear. 的意思是说，当我们看到一个原创的思考者在一个他并不熟悉的领域（如约会）产生的想法，尽管这些想法可能很新颖和独特，但可能并不完全正确或实用。这种情况使我们意识到，原创性（或创新性）和专业知识是两个可以分开的概念。也就是说，一个人可以在某个领域有很强的创造力，但并不意味着他在这个领域是专家。</p><p>换句话说，这句话强调了原创性和真实的专业知识之间的差异。通过这个例子，作者指出，即使某人有原创的想法，也不意味着他们的观点一定是正确或有深度的，除非这与他们的专业知识相结合。</p>    </div></div><p>I don’t know if it’s possible to cultivate originality, but there are definitely ways to make the most of however much you have. For example, you’re much more likely to have original ideas when you’re working on something. Original ideas don’t come from trying to have original ideas. They come from trying to build or understand something <code>slightly too difficult.(适当难度)</code> [15]</p><p>Talking or writing about the things you’re interested in is a good way to generate new ideas. When you try to put ideas into words, <code>a missing idea creates a sort of vacuum that draws it out of you.</code> Indeed, there’s a kind of thinking that can only be done by writing.</p><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <p>当你试图将想法表达为文字时，有时你可能会发现某些想法或信息缺失。这个“缺失的想法”在你尝试阐述它的过程中，产生了一种“真空”感。这种真空感会迫使你深入思考，从而“吸引”或激发你产生新的或更具体的想法来填补这个空白。简而言之，当你试图写下自己的思考时，你可能会更深入地思考那些以前未完全清晰或未完全形成的想法。</p><p>因此，写作有时能够引发那些仅通过思考很难产生的特定类型的思维。当你在纸上或屏幕上看到自己的话语时，可能会更容易发现逻辑上的漏洞或信息的缺失，并因此被迫进一步深入地思考和完善它。</p>    </div></div><p>Changing your context can help. If you visit a new place, you’ll often find you have new ideas there. The journey itself often dislodges them. But you may not have to go far to get this benefit. Sometimes it’s enough<code>just to go for a walk.</code>[16]</p><blockquote><p>确实,散散步就能想到很多新的东西</p></blockquote><p>It also helps to travel in topic space. You’ll have more new ideas if you explore lots of different topics, <code>partly because it gives the angle grinder more surface area to work on, and partly because analogies are an especially fruitful source of new ideas.</code></p><blockquote><p>探索多种不同的话题可以帮助你产生更多的新想法，部分原因是这为你的思考提供了更多的“材料”或“空间”，部分原因是类比是一个尤为有助于产生新想法的工具。</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        angle grinder    </div>    <div class='spoiler-content'>        <p>“angle grinder”原本是一种工具，用于磨削、抛光或切割材料。在这里，它被用作隐喻，代表一个人的思考和创意能力。当你给角磨机更多的表面去工作，它可以产生更多的火花或效果。同样地，当你探索更多不同的话题时，你为自己的思考和创意能力提供了更多的“材料”或“表面”，从而产生更多的新想法。</p>    </div></div><p>Don’t divide your attention evenly between many topics though, or you’ll <code>spread yourself too thin</code>. You want to distribute it according to something more like a power law. [17] Be professionally curious about a few topics and <code>idly(无目的地)</code> curious about many more.</p><p>Curiosity and originality are closely related. Curiosity feeds originality by giving it new things to work on. But the relationship is closer than that. <code>Curiosity is itself a kind of originality; it&#39;s roughly to questions what originality is to answers</code>. <code>And since questions at their best are a big component of answers, curiosity at its best is a creative force.</code></p><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <p>这段话确实包含了一些哲学和抽象的思考，我会帮助你理解它。</p><p>“Curiosity and originality are closely related.”</p><p>这意味着好奇心和原创性有紧密的联系。好奇心驱使人们去探索、学习和尝试新的事物，而这种探索过程往往会产生新颖和独特的思考或创意。</p><p>“Curiosity feeds originality by giving it new things to work on.”</p><p>好奇心鼓励我们深入探索未知领域，为我们的原创性提供了新的素材和灵感。简单来说，好奇心为原创性“供给”新的素材或主题。</p><p>“Curiosity is itself a kind of originality; it’s roughly to questions what originality is to answers.”</p><p>这句话表达的是好奇心本身也是一种原创性的表现。好奇心会产生问题，而原创性则为这些问题提供答案。比喻地说，好奇心对于提出问题就像原创性对于提供答案一样重要。</p><p>“And since questions at their best are a big component of answers, curiosity at its best is a creative force.”</p><p>这句话进一步强调了问题的重要性。好的问题本身是答案的一个重要组成部分，因为它们指引和驱动了我们的思考和探索。因此，当好奇心处于其最佳状态时，它就成为了一个强大的创造性动力。</p><p>即:由好奇心出发得到的答案往往会具有原创新.</p>    </div></div></details><details>  <summary>Part 4</summary>自信地裁剪：不要因为对某物自豪或为其付出了巨大的努力就留下它，即使它不合适。\追求本质：将工作简化至其核心，结果会更加纯粹，更容易理解。\数学与艺术的优雅：艺术中的优雅与数学中的优雅紧密相连，优雅往往超出了数学的范围。\优雅与努力：虽然繁琐的解决方案可能短期内更受认可，但真正优雅的工作可能看起来不需要那么多努力，因为它已经存在。\创造与发现：当你无法确定你是在创造还是发现时，更多地考虑自己是发现的一部分。\工具的力量：创建强大的工具时，应尽量消除限制，使其在未预见的方式上发挥作用。\重要性的创意：伟大的创意常常像工具一样，其他人可以基于此构建。\原创性的本质：原创性不仅仅是一个过程，它是一种思维习惯，不依赖于某个领域的专业知识。\提高原创性：工作、写作、交流、改变环境、探索不同的主题都可以激发原创性。\好奇心与原创性：好奇心和原创性紧密相连，好奇心本身就是一种创新；好奇心对问题的态度与原创性对答案的态度相似。<img src="/post/2cc5/part4detailed.png" class="" title="part 4 detail"></details> <p>将以上的信息总结成一个凝练的短语, 或者短句, 结尾配上一个emoji.给我四个版本.</p><p>Having new ideas is a strange game, because it usually consists of seeing things that were right under your nose. Once you’ve seen a new idea, it tends to seem obvious. Why did no one think of this before?</p><p>When an idea seems simultaneously novel and obvious, it’s probably a good one.</p><p>Seeing something obvious sounds easy. And yet empirically having new ideas is hard. What’s the source of this apparent contradiction? It’s that seeing the new idea usually requires you to change the way you look at the world. We see the world through models that both help and constrain us. When you fix a broken model, new ideas become obvious. But noticing and fixing a broken model is hard. That’s how new ideas can be both obvious and yet hard to discover: they’re easy to see after you do something hard.</p><p>One way to discover broken models is to be stricter than other people. Broken models of the world leave a trail of clues where they bash against reality. Most people don’t want to see these clues. It would be an understatement to say that they’re attached to their current model; it’s what they think in; so they’ll tend to ignore the trail of clues left by its breakage, however conspicuous it may seem in retrospect.</p><p>To find new ideas you have to seize on signs of breakage instead of looking away. That’s what Einstein did. He was able to see the wild implications of Maxwell’s equations not so much because he was looking for new ideas as because he was stricter.</p><p>The other thing you need is a willingness to break rules. Paradoxical as it sounds, if you want to fix your model of the world, it helps to be the sort of person who’s comfortable breaking rules. From the point of view of the old model, which everyone including you initially shares, the new model usually breaks at least implicit rules.</p><p>Few understand the degree of rule-breaking required, because new ideas seem much more conservative once they succeed. They seem perfectly reasonable once you’re using the new model of the world they brought with them. But they didn’t at the time; it took the greater part of a century for the heliocentric model to be generally accepted, even among astronomers, because it felt so wrong.</p><p>Indeed, if you think about it, a good new idea has to seem bad to most people, or someone would have already explored it. So what you’re looking for is ideas that seem crazy, but the right kind of crazy. How do you recognize these? You can’t with certainty. Often ideas that seem bad are bad. But ideas that are the right kind of crazy tend to be exciting; they’re rich in implications; whereas ideas that are merely bad tend to be depressing.</p><p>There are two ways to be comfortable breaking rules: to enjoy breaking them, and to be indifferent to them. I call these two cases being aggressively and passively independent-minded.</p><p>The aggressively independent-minded are the naughty ones. Rules don’t merely fail to stop them; breaking rules gives them additional energy. For this sort of person, delight at the sheer audacity of a project sometimes supplies enough activation energy to get it started.</p><p>The other way to break rules is not to care about them, or perhaps even to know they exist. This is why novices and outsiders often make new discoveries; their ignorance of a field’s assumptions acts as a source of temporary passive independent-mindedness. Aspies also seem to have a kind of immunity to conventional beliefs. Several I know say that this helps them to have new ideas.</p><p>Strictness plus rule-breaking sounds like a strange combination. In popular culture they’re opposed. But popular culture has a broken model in this respect. It implicitly assumes that issues are trivial ones, and in trivial matters strictness and rule-breaking are opposed. But in questions that really matter, only rule-breakers can be truly strict.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
          <category> 金玉良言 </category>
          
          <category> 阅读 </category>
          
          <category> paulgraham.com </category>
          
          <category> 哲学 </category>
          
          <category> 论 </category>
          
          <category> 方法论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 如何成大事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Graph Description Training</title>
      <link href="/post/a0bc.html"/>
      <url>/post/a0bc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>英语小知识点</title>
      <link href="/post/84.html"/>
      <url>/post/84.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><div class='spoiler collapsed'>    <div class='spoiler-title'>        i.e. and so on?    </div>    <div class='spoiler-content'>        <p>ME<br>英文中i.e. 和 e.g.是啥意思?我总是搞混,</p><p>ChatGPT<br>“i.e.” 和 “e.g.” 都是拉丁语缩写，在英文中使用来引导解释或举例的短语。尽管它们常常被混淆，但它们有不同的含义和用法：</p><p>i.e. (id est): 这是拉丁短语 “id est” 的缩写，意为 “that is”（也就是说）或 “in other words”（换句话说）。它用于对前面提到的事物进行进一步的解释、阐述或澄清。当你使用 “i.e.” 时，你是在提供一个更详细的说明，以便读者更好地理解前面的内容。</p><p>例子：I have a favorite fruit, i.e., an apple.（我有一个最喜欢的水果，也就是苹果。）</p><p>e.g. (exempli gratia): 这是拉丁短语 “exempli gratia” 的缩写，意为 “for example”（例如）。它用于列举一些例子，以展示或说明某个概念。当你使用 “e.g.” 时，你是在提供一些具体的示例，以便更好地阐述你正在谈论的事物。</p><p>例子：I enjoy outdoor activities, e.g., hiking and biking.（我喜欢户外活动，例如徒步和骑自行车。）</p><p>总之，”i.e.” 是用来进一步解释或澄清，而 “e.g.” 是用来列举例子。记住它们的区别，可以帮助你在写作和阅读时更准确地使用这些缩写。</p><p>ME<br>还有其他的类似常用的书面缩写吗</p><p>ChatGPT<br>当涉及到书面缩写时，除了 “i.e.” 和 “e.g.”，还有一些其他常见的缩写，它们在正式写作和学术领域中经常使用。以下是一些例子：</p><p>et al. (et alia &#x2F; et alii): 这是拉丁短语 “et alia” 或 “et alii” 的缩写，意为 “and others”（等人，多人）。它用于引用多个作者的作品时，特别是在文献引用中。</p><p>etc. (et cetera): 这是拉丁短语 “et cetera” 的缩写，意为 “and so on”（等等）。它用于列举一系列事物时，表示后面还有类似的事物。</p><p>cf. (confer): 这是拉丁短语 “confer” 的缩写，意为 “compare”（对比）。它用于指示读者可以参考其他地方的内容进行比较。</p><p>viz. (videlicet): 这是拉丁短语 “videlicet” 的缩写，意为 “namely”（即，也就是）。它用于进一步说明或具体列举前面提到的内容。</p><p>i.a. (inter alia): 这是拉丁短语 “inter alia” 的缩写，意为 “among other things”（在其他事物中）。它用于指出某个列表或情况只是其中的一部分。</p><p>ibid. (ibidem): 这是拉丁短语 “ibidem” 的缩写，意为 “in the same place”（同上）。它用于在相同的引用处引用相同的来源。</p><p>这些缩写在正式写作、学术论文和引用中经常使用，可以使文本更简洁，同时也需要读者熟悉这些缩写的含义。</p>    </div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tag name expected</title>
      <link href="/post/a20.html"/>
      <url>/post/a20.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Template render error@unexpected end of file</title>
      <link href="/post/bff7.html"/>
      <url>/post/bff7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="hexo-g-报错及解决办法"><a href="#hexo-g-报错及解决办法" class="headerlink" title="hexo g 报错及解决办法"></a>hexo g 报错及解决办法</h1><h2 id="Template-render-error"><a href="#Template-render-error" class="headerlink" title="Template render error"></a>Template render error</h2><h3 id="unknown-path-unexpected-end-of-file-at-Object-prettifyError"><a href="#unknown-path-unexpected-end-of-file-at-Object-prettifyError" class="headerlink" title="(unknown path) unexpected end of file at Object._prettifyError"></a>(unknown path) unexpected end of file at Object._prettifyError</h3><div class='spoiler collapsed'>    <div class='spoiler-title'>        (unknown path) unexpected end of file at Object._prettifyError    </div>    <div class='spoiler-content'>        <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">Template render error: (unknown path)</span><br><span class="line">unexpected end of file</span><br><span class="line">at Object._prettifyError (D:\myblog\czzblog\node_modules\nunjucks\src\lib.js:32:11)</span><br><span class="line">at Template.render (D:\myblog\czzblog\node_modules\nunjucks\src\environment.js:442:21)</span><br><span class="line">at Environment.renderString (D:\myblog\czzblog\node_modules\nunjucks\src\environment.js:313:17)</span><br><span class="line">at D:\myblog\czzblog\node_modules\hexo\lib\extend\tag.js:238:16</span><br><span class="line">at tryCatcher (D:\myblog\czzblog\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">at Promise.fromNode.Promise.fromCallback (D:\myblog\czzblog\node_modules\bluebird\js\release\promise.js:209:30)</span><br><span class="line">at Tag.render (D:\myblog\czzblog\node_modules\hexo\lib\extend\tag.js:237:20)</span><br><span class="line">at Object.onRenderEnd (D:\myblog\czzblog\node_modules\hexo\lib\hexo\post.js:426:22)</span><br><span class="line">at D:\myblog\czzblog\node_modules\hexo\lib\hexo\render.js:85:21</span><br><span class="line">at tryCatcher (D:\myblog\czzblog\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">at Promise._settlePromiseFromHandler (D:\myblog\czzblog\node_modules\bluebird\js\release\promise.js:547:31)</span><br><span class="line">at Promise._settlePromise (D:\myblog\czzblog\node_modules\bluebird\js\release\promise.js:604:18)</span><br><span class="line">at Promise._settlePromise0 (D:\myblog\czzblog\node_modules\bluebird\js\release\promise.js:649:10)</span><br><span class="line">at Promise._settlePromises (D:\myblog\czzblog\node_modules\bluebird\js\release\promise.js:729:18)</span><br><span class="line">at _drainQueueStep (D:\myblog\czzblog\node_modules\bluebird\js\release\async.js:93:12)</span><br><span class="line">at _drainQueue (D:\myblog\czzblog\node_modules\bluebird\js\release\async.js:86:9)</span><br><span class="line">at Async._drainQueues (D:\myblog\czzblog\node_modules\bluebird\js\release\async.js:102:5)</span><br><span class="line">at Async.drainQueues (D:\myblog\czzblog\node_modules\bluebird\js\release\async.js:15:14)</span><br><span class="line">at process.processImmediate (node:internal/timers:476:21)</span><br></pre></td></tr></table></figure>    </div></div><div class='spoiler collapsed'>    <div class='spoiler-title'>        问题原因&&解决办法    </div>    <div class='spoiler-content'>        <p>在我结束<a href="https://www.czz9.top/post/51c4.html" target="blank">一篇经济学人文章</a>,按下hexo g后,出现了上述的报错.显然,一定是刚刚完成的md文件有地方没配置错.第一次遇到,难免惊慌,不过问题应该不大,于是请教gpt:<br><img src="/post/bff7/gpt%E6%84%8F%E8%A7%81.png" class="" title="gpt意见"><br>感觉不够爽(其实是没看懂,还以为我没问对,后来知道其实问题已经差不多明了了)<br><a href='https://conquerorlei.github.io/posts/af15db9a/' target="_blank">问题产生原因</a><br>👆简述:文章中出现了nunjucks语法的字符的语法错误。<br>nunjucks是啥呢?询问chatgpt得到答复:<br><img src="/post/bff7/nunjucks%E6%98%AF%E4%BB%80%E4%B9%88.png" class="" title="nunjucks"><br>所以,到这一步基本懂了:</p><p>&lbrace;%spoiler%&rbrace;&lbrace;&percnt;endspoiler&percnt;&rbrace; :这对我常用的代码块肯定是没对齐&#x2F;配对!</p><blockquote><p>找到缺失”%”字符的代码块,确认对齐后,重新hexo g; 通过!</p></blockquote><blockquote><p>自定义模板(Live Template):根本上解决问题–告别遗漏结束标签&#x2F;结束块!</p></blockquote><p><a href="https://www.jianshu.com/p/afc102046ebf">解决办法参考链接:webstorm 新建自定义快捷键代码块</a></p><p>由于文中的例子是以javascript为例子,而我的博文原始文是md格式,且我的webstorm是以中文语言为主,所以有与我类似情况的可以依据下文做一些调整:</p><ul><li>1 Live Template 翻译为:实时模板</li><li><img src="/post/bff7/%E5%AE%9E%E6%97%B6%E6%A8%A1%E6%9D%BF%E4%BD%8D%E7%BD%AE.png" class="" title="实时模板位置"></li><li>2 在HTML下新建</li><li><img src="/post/bff7/HTML%E6%A0%BC%E5%BC%8F.png" class=""></li><li>3 左下角类型选择(一定要选!),点开后选择最底端的”其他”字样</li><li><img src="/post/bff7/%E7%B1%BB%E5%9E%8B%E9%80%89%E6%8B%A9_%E4%BD%8D%E4%BA%8E%E6%9C%80%E5%BA%95%E7%AB%AF%E7%9A%84_%E5%85%B6%E4%BB%96.png" class="" width=""></li></ul>    </div></div><div class='spoiler collapsed'>    <div class='spoiler-title'>            </div>    <div class='spoiler-content'>        <blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实这跟我撰写那一篇博客的过程有很大关系:写博客的时候老是被打扰,导致有很多包含&lbrace;%&percnt;&rbrace;的代码块漏加上,这个问题我也早些时候发现了,后面也看了诸如 <a href="https://www.jianshu.com/p/afc102046ebf"> 解决办法参考链接:webstorm 新建自定义快捷键代码块</a>的链接,可是当时<br><strong>一</strong> 是没有什么动力去改变,<br><strong>二</strong> 是里面的一些设置选项(例如实时模板)有些难找,就放弃了.  </p><p>今天,干脆趁着这股劲把它添加上了.  </p></blockquote><p>方法论:<br>根据查到的<strong>问题</strong>及其<strong>解决方案</strong>确定出现这类问题的<strong>原因</strong><br>根据原因<strong>回忆</strong>你在操作过程中可能出现的<strong>类似的情况</strong><br>然后对操作进行<strong>复盘</strong>大致确定问题可能出现的<strong>范围</strong><br>对<strong>范围内的类似情况进行逐一排查</strong>  </p><h4 id="最后-也是最重要的一点-想想有什么长期有效的杜绝方案"><a href="#最后-也是最重要的一点-想想有什么长期有效的杜绝方案" class="headerlink" title="最后,也是最重要的一点:想想有什么长期有效的杜绝方案"></a>最后,也是最重要的一点:想想有什么长期有效的杜绝方案</h4>    </div></div><h3 id="https-chat-openai-com-c-260a9bce-d4ed-43f8-9fe3-b027d333e4ab"><a href="#https-chat-openai-com-c-260a9bce-d4ed-43f8-9fe3-b027d333e4ab" class="headerlink" title="&#x2F;&#x2F;https://chat.openai.com/c/260a9bce-d4ed-43f8-9fe3-b027d333e4ab"></a>&#x2F;&#x2F;<a href="https://chat.openai.com/c/260a9bce-d4ed-43f8-9fe3-b027d333e4ab">https://chat.openai.com/c/260a9bce-d4ed-43f8-9fe3-b027d333e4ab</a></h3><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>New research helps explain why Chinas low birth are stuck 经济学人精读 Economist</title>
      <link href="/post/cd82.html"/>
      <url>/post/cd82.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=780 height=86 src="//music.163.com/outchain/player?type=2&id=2052304180&auto=1&height=66"></iframe><h1 id="New-research-helps-explain-why-China’s-low-birth-rates-are-stuck"><a href="#New-research-helps-explain-why-China’s-low-birth-rates-are-stuck" class="headerlink" title="New research helps explain why China’s low birth rates are stuck"></a>New research helps explain why China’s low birth rates are stuck</h1><h3 id="Spillover-effects-may-be-to-blame"><a href="#Spillover-effects-may-be-to-blame" class="headerlink" title="Spillover effects may be to blame"></a>Spillover effects may be to blame</h3><p>THE SCARS(伤疤) left by China’s population-control policies are clear. Last year, its population started to fall for the first time since 1962; its working-age population has been declining for a decade. A shrinking workforce <code>acts as a drag(拖累了)</code> on growth, and a swelling number of elderly puts pressure on the welfare system(福利体系).</p><p><code>Family-planning(生育政策)</code> regulations like the one-child policy are widely blamed for depressing birth rates. But a less explored idea is that falling birth rates can <code>ripple through the population(在群体中产生连锁反应)</code> causing the decline to be <code>self- reinforcing(这个现象会对现象本身产生正反馈而加强/恶性循环)</code>. There has been little hard evidence to back this up, but a new paper about changes in China 50 years ago appears to offer some proof. Pauline Rossi of Ecole Polytechnique in Paris and Yun Xiao of the University of Gothenburg <code>show(发表文章称)</code> in the Journal of the European Economic Association that birth-control policies have “spillover effects”, meaning that if some couples reduce their number of children, it may lead others to follow suit(效仿).</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        follow suit 学样    </div>    <div class='spoiler-content'>        <p>When one company introduces a new product others often follow suit.</p>    </div></div><img src="/post/cd82/1926.png" class="" title="graph"><p>Professors Rossi and Xiao examine fertility data for women born between 1926 and 1945. This cohort was <code>of reproductive age(处于生育年龄)</code> when the “later, longer and fewer” (LLF) campaign of the 1970s, the first of China’s family-planning policies, began. It encouraged couples to marry later, wait longer between children and have fewer of them. Much of China’s fertility decline happened during this period. In 1969, the total fertility rate (the average number of children a woman is expected to have over her lifetime at current birth rates) was 6.2, according to the World Bank; a decade later, when the one-child policy was introduced, it had already fallen to 2.7.</p><p>Crucially(重要的是), the LLF campaign targeted only the main ethnic group, the Han. That allowed the authors to study how ethnic-minority groups, who <code>were exempt from(豁免)</code> it, responded. After controlling for other factors, they found that the policy did not affect minorities who lived apart from the Han. For those who lived among the Han, however, it led to a decline in fertility— what the authors suggest is evidence of spillovers(溢出效应). The greater the share of Han in the prefecture(县,居住区), the stronger the effect.</p><p>Spillover effects may work <code>in two ways</code>. First, couples who have fewer children have more resources to invest per child. Other couples may feel <code>compelled(有必要/被迫)</code> to <code>emulate(效仿)</code> them if they want to compete, especially in areas such as education. A second way is through social conformity(从众). As some couples have fewer children, this may influence others to limit the number of children they have, too. The authors found that minorities culturally closer to the Han were affected more by the LLF.</p><p>China is not the only place affected by spillovers. They have been found in South Korea, too, another country with a low fertility rate and punitively expensive education. Many children there attend private tuition classes, known as hagwon, late into the evening. Seongeun Kim of Sejong University and others found that when wealthy families spent less on private classes, it led lower-income families to do the same. Spillovers may happen where people have strong economic or social incentives to keep up with others.</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        spillover    </div>    <div class='spoiler-content'>        <p>“Spillovers” 在这里意味着某种行为或决策的影响从一个群体“溢出”到另一个群体。在这个上下文中，富裕家庭的消费决策产生了一个“溢出”效应，影响了低收入家庭。原因可能是人们有很强的经济或社会动机去跟上其他人。例如，如果一个社区中的多数家庭都停止发送他们的孩子去参加昂贵的私人课程，那么其他家庭可能也会觉得不应该是唯一继续支付这种费用的家庭，因为这可能在社交或文化上被视为“与众不同”或“浪费”。</p>    </div></div><div class='spoiler collapsed'>    <div class='spoiler-title'>        人群的从众心理是因为什么?你觉得这种从众心理有什么底层的逻辑?    </div>    <div class='spoiler-content'>        <p>人群的从众心理是一个复杂的现象，其背后有多种心理、生物学和社会学原因。以下是一些可能导致从众心理的原因及其底层逻辑：</p><p>生物学原因：从进化的角度看，成为一个社群的一部分可以提高生存和繁殖的机会。古代的人类依赖团体来共同狩猎、搜集食物和防御外来威胁。因此，适应并融入大多数人的行为和信仰可能是一种生存策略。</p><p>对认同的需求：人类有一种天生的需要，那就是被社区或团体接受和认同。从众可以使人感到更加安全，减少被排斥或孤立的风险。</p><p>信息不确定性：当个体不确定自己的决策或看法时，他们可能会依赖其他人的意见和行为。这被认为是一种“社会证明”，即如果多数人都这么做或这么认为，那么它可能是正确的。</p><p>减少心理不适：与大多数人持有相反的观点或行为可能会带来心理不适或紧张。从众可以避免这种不适，使人感到更加舒适和自在。</p><p>社会压力：在许多文化和社会中，不从众可能会带来直接的后果，如被嘲笑、被排斥或其他形式的惩罚。</p><p>从众心理的底层逻辑主要围绕人的社会生物学需要，以及在一个群体中寻求安全、接受和认同的需求。然而，这种心理也有其缺点，例如可能导致团体思维或阻碍创新。尽管如此，在许多情境中，从众心理是有益的，可以帮助维持社会稳定和和谐。</p>    </div></div><p>For China, the <code>implications are grim(影响是严峻的)</code>. The government has belatedly tried to <code>prod couples into(鼓励)</code> having more children, with little success. Even though the one-child policy ended in 2016 and China switched to a three-child policy in 2021, birth rates have not rebounded. The fertility rate fell to 1.2 in 2021, a record low. The high cost of having children means couples want fewer of them. Low birth rates are in turn reinforced by spillovers, leading more couples to follow suit. <code>Without `external impetus(动力)`, China cannot escape this trap.</code></p><p>What can be done? Theoretically, if spillovers work in reverse, getting one segment of the population to have more children could have an impact. To this end(为此), China’s leaders have tried to <code>crack down on private tutoring(打击私人辅导)</code> in order to slow the education arms race. They could also incentivise(激励) couples through payments(奖励) or benefits for extra kids. But experience suggests that such policies yield meagre results(收效甚微). China is finding that it was much easier to use force to restrict the number of births than it is to increase it. ■</p><p>Subscribers can sign up to Drum Tower, our new weekly newsletter, to understand what the world makes of China—and what China makes of the world.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
          <category> 阅读 </category>
          
          <category> 经济学人 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>China&#39;s young want to work 经济学人精读 Economist</title>
      <link href="/post/51c4.html"/>
      <url>/post/51c4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><blockquote><p>本站<code>背景音乐</code>可<code>左下角</code>暂停,<code>下方</code>是该篇文章的<code>朗读版音频</code>,有需求可以播放(如果不能显示,可以点击链接:<a href="https://music.163.com/#/song?id=2052304183" target="_blank">网易云_China’s young want to work</a>):</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=780 height=86 src="//music.163.com/outchain/player?type=2&id=2052304183&auto=1&height=66"></iframe><p>The job search goes on<br>China’s young want to work.<br>For the government Youth unemployment is now shockingly high</p><p>CHINA IS A land of remarkable statistics. But an official figure published on May 16th still managed to stand out. The unemployment rate among China’s urban youth, aged between 16 and 24, exceeded one in five in April.</p><p>The figure boggles the mind(让人难以置信) for a variety of reasons. China is running short of young people. It is trying, without much success, to raise the birth rate. Its economic future hangs on(取决于) increased education, which could improve the quality of its workers even as their quantity declines. China is also famous for mobilising resources, including manpower. Yet it is wasting large numbers of the best-educated cohort(人才) it has ever produced.</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        hang on为什么是取决于?    </div>    <div class='spoiler-content'>        <p>“Hang on”是一个非常多功能的短语，根据上下文它可以有多种意思。例如：<br>等一下: “Hang on a minute!”<br>依赖： “Our decision hangs on the results of the survey.”<br>坚持： “Just hang on, help is on the way.”<br>词汇的含义经常是基于其历史和文化的背景演变的。”Hang”原意是”悬挂”，而”on”可以表示方向或依附。从字面意思上来看，“悬挂在…上”可能指的是物体或事情的存续、持续或依赖于另一物体或情况。例如，一个画像挂在墙上，它的位置依赖于墙。这样的直观含义可能使”hang on”逐渐与”依赖”或”取决于”的意思联系在一起。</p>    </div></div><p>Youth unemployment is puzzling, as well as surprising. It has increased even as China’s economy has reopened after the sudden end of its zero-covid regime in December. It has jumped up(大幅上升) while the overall unemployment rate has edged(小幅下降) downwards (from 6.1% in April 2022 to 5.2% a year later). And it is likely to rise further in the next few months. This year, a record 11.6m students will graduate from university, an increase of almost 40% since 2019. They include Wang Lili, who will leave one of China’s top-100 universities this year with a degree in management. “The market is terrible,” she laments. “Many graduates are very anxious.”</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        描述数据变化    </div>    <div class='spoiler-content'>        <img src="/post/51c4/static_change_describe_2.png" class=""><img src="/post/51c4/static_change_describe.png" class="">Spiral: 可以表示`迅速`上升or下降    </div></div><p>The number of unemployed youth (about 6.3m in the first three months of this year) is small relative to China’s 486m-strong(逾) urban workforce. But they attract most of the attention, points out(指出) Xiangrong Yu of Citigroup, a bank, and his colleagues. The anxiety and disappointment felt by college students—and spread through social media—could “affect the confidence of the entire society”, write Zhuo Xian and his co-authors at the Development Research Centre (DRC), a government think-tank(智库).</p><p>Although the problem has outlasted(still exists even after) the pandemic, it is partly caused by it. When covid struck, many Chinese chose to extend their studies. In 2020, for example, the Ministry of Education told universities to increase the number of Master’s students by over 20%. That has created <code>a bulge of</code>(激增) newly minted(新出现的&#x2F;刚刚产生的) graduates entering the labour force <code>in subsequent years</code>.</p><p>China’s reopening may have tempted many of those who had dropped out of the job market to re-engage before firms were ready to hire them. The bottleneck has been aggravated(加剧) by mismatches in timing, skills and aspirations. Some graduates delayed their job hunt last year to prepare for entrance exams for higher degrees or the civil service. But employers last year wanted to fill their ranks(填补员工队伍) early because of fears of a winter covid wave. So later job-seekers missed the best recruitment months and many are now competing for the same jobs as students leaving university in 2023.<br>(因此，<code>后来的</code>(而不是<code>后来</code>)求职者错过了最好的招聘月份，许多人现在都在竞争与2023年大学毕业生相同的工作。)</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        这一段第一句如何理解?    </div>    <div class='spoiler-content'>        <p>这句话是说，当中国重新开放时，许多之前退出工作市场的人可能被吸引回来并重新参与到求职中，即使公司还没有准备好雇佣他们。让我们逐步解析这句话以帮助你理解：</p><ul><li><p>1:China’s reopening：这是指中国在某种封锁或限制（可能是因为疫情）之后恢复正常运作。</p></li><li><p>2:tempted many of those who had dropped out of the job market：这里的“tempted”意为“吸引”。而“those who had dropped out of the job market”指的是那些之前因各种原因（可能是经济、健康或其他因素）而退出工作市场的人。</p></li><li><p>3:to re-engage before firms were ready to hire them：这意味着这些人被吸引回来并想再次找工作，但问题是，尽管他们想要工作，公司却还没有准备好雇佣他们。</p></li></ul><p>因此，简而言之，这句话的意思是：随着中国的重新开放，许多之前离开工作市场的人想要回来找工作，但公司可能还没有准备好或没有足够的职位供他们选择。这可能导致求职者与雇主之间的错配，因为雇主可能还没有做好雇佣大量新员工的准备。<br>其实,这里可以和本段第二句一起结合理解.</p>    </div></div><p>Some of them boast(拥有&#x2F;具备) qualifications that are out of sync with the new demands of the economy. Platforms like Alibaba, property firms(房地产公司) like Evergrande(grandeur 壮丽,雄伟), and online tutors(在线教育) like New Oriental were once dream employers for graduates. But in the time it takes to earn a bachelor’s degree, they have lost favour with the government.</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        最后一句    </div>    <div class='spoiler-content'>        <p>user:<br>我的理解是这么翻译:”但是当上述这些公司的职位要求都是硕士时,他们对于政府失去了兴趣.”<br>但是翻译软件给出的参考是:”但在获得学士学位所需的时间里，他们已经失去了政府的青睐。”<br>请告诉我<br>1:正确的翻译应该是怎样的<br>2:这句话为什么应该采用你提供的这种方式.<br>一步一步输出答案.</p><p>chatgpt:<br>原句：But in the time it takes to earn a bachelor’s degree, they have lost favour with the government.</p><ul><li><p>1: in the time it takes to earn a bachelor’s degree：这里描述的时间段是获得学士学位所需的时间，大约是3-4年。</p></li><li><p>2:they have lost favour with the government：这里的”they”指代上文中提到的公司，如Alibaba、Evergrande和New Oriental。”lost favour with the government”意思是这些公司曾经得到了政府的支持或好评，但现在不再被政府所喜爱或支持。</p></li></ul><p>所以，对于你的翻译问题：</p><p>正确的翻译是：”但在获得学士学位所需的时间里，他们已经失去了政府的青睐。”</p><p>为什么应该采用这种方式：</p><ul><li>1语境：在原句中，并没有提到上述公司的职位要求是硕士。所以，从原文的语境出发，我们不能得出这样的结论。<br>直译与意译：虽然有时我们可以进行意译，即根据原文的意思进行译文创作，但在这种情况下，直译更为准确，因为它保留了原句的原意。<br>逻辑关系：从原文中，我们可以知道许多刚从大学毕业的学生在找工作时，面临着与去年毕业的学生竞争同样的工作机会。但一些公司，如Alibaba、Evergrande和New Oriental，曾是大学生的梦想雇主。然而，随着时间的推移，这些公司已经不再受到政府的喜爱。这种逻辑关系与你的翻译中提到的公司要求硕士学历是不符的。</li></ul><p>我大概明白了:是不是可以说,在这些学生继续学业取得硕士学位的时候,这些公司已经不再被政府所青睐.但是,这句话不就有两个主语?前半句时学生(取得硕士学位),后半句时公司(不被政府青睐)?这种句子不会有语法错误吗?</p><p>chatgpt:<br>你的理解是对的。确实，这句话在描述两个并行的、时间上相关的事件。但这句话并没有两个主语，只是在描述一个时间段内发生的两件事情。</p><p>这种结构在英语中是合法的，并且经常被使用来描述在同一时间段内发生的两个或多个相关事件。句子的主要结构可以理解为：在一段时间内（在获得学士学位的时间里），某事发生了（他们失去了政府的青睐）。</p><p>这里的“in the time it takes to earn a bachelor’s degree”是一个时间状语从句，用来说明主句“they have lost favour with the government”发生的时间背景。</p><p>所以，这句话的结构在英语语法中是完全正确的。</p>    </div></div><div class='spoiler collapsed'>    <div class='spoiler-title'>        boost boast bolster    </div>    <div class='spoiler-content'>        <p>“boost” 和 “bolster” 这两个词都有增强或提高的含义，但它们在使用和语境中有所不同。以下是这两个词的定义和区别：</p><p>Boost:</p><p>定义：给予提振或增加；推动。<br>用法：通常用于描述某种突然的或显著的提升或增加。<br>示例：The advertisement campaign helped boost the sales of the product.<br>Bolster:</p><p>定义：支持或加强；巩固。<br>用法：通常指为了给某物提供稳定性或支持而增强它。<br>示例：He provided additional evidence to bolster his argument.<br>总结：</p><p>Boost 更偏向于描述一个积极的、快速的增长或提升。<br>Bolster 更多地强调提供稳固的支持或加强。</p><p>boast: 拥有&#x2F;夸耀</p>    </div></div><p>China’s leaders now fear what they call the “disorderly expansion of capital”(资本无序扩张) in sectors(领域) like property and education, as well as the market power and cultural reach(文化影响力) of tech firms. Recruitment has therefore slowed. Only 5.5% of students graduating this year expect to go into the education and training industries, according to a survey by Zhaopin, a recruitment portal.</p><p>Some graduates now adopt a “<code>spray and pray</code>”(盲投) approach, as Ms Wang (not her real name) puts it, submitting applications willy-nilly. The government is keen to steer talent into “hard tech” industries, such as aerospace, biotechnology and electric vehicles. They are promoted in the latest five-year plan and have grown faster than industry as a whole, says Louise Loo of Oxford Economics, a consultancy. Employment may follow. According to the recent Zhaopin survey, 57% of engineers graduating this year had already received a job offer, compared with only 41% of their counterparts(相对应的&#x2F;相似的,此处指毕业生) in the humanities(人文学科).</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        willy-nilly    </div>    <div class='spoiler-content'>        <p>“Willy-nilly” 原本是“will he, nill he”的缩写，直译为“他愿意，他不愿意”，表示不管某人是否愿意，某事都会发生。这个短语的使用可以追溯到14世纪。现在，“willy-nilly”通常用来描述某事是随机、没有计划或是必然的。</p><p>例如，在您提供的句子中，“willy-nilly” 表示应届毕业生随意、无计划地提交工作申请，而不是根据特定的工作或兴趣进行选择。</p><p>从词源和历史背景来看，”willy-nilly” 的起源并不是为了描述随机或无计划的行动，但随着时间的推移，它的用法已经演变，现在更常用来描述这种行为。</p>    </div></div><p>One of the oddities(奇怪现象) of China’s labour market is that <code>less-educated</code> youth are less likely to be <code>unemployed</code>. Youngsters with vocational qualifications(职业资格证书) or just a high-school education may have more practical skills and a more burning need(迫切的需求) for a job. “Everyone says a degree is a stepping stone,”(open sesame 敲门砖) said one hapless(倒霉的) graduate in an online comment translated by China Digital Times, a media-monitoring website, “but I’m slowly coming to realise it’s more like a pedestal I can’t get down from.”  </p><div class='spoiler collapsed'>    <div class='spoiler-title'>        最后一句?    </div>    <div class='spoiler-content'>        <p>这部分揭示了该毕业生的感受。这里的“pedestal”可以理解为一个高高的基座或者柱子。一旦站上去，很难再下来。这意味着，尽管他有一个学位，这个学位反而成为了限制他的一个因素。他可能发现自己因为学位而被限制在某种特定的角色或期望中，而无法获得那些需要实际技能或不同技能的工作机会。</p>    </div></div><p>Students’ aspirations may be changing. The proportion choosing to continue their studies (at home or abroad) fell by almost half in this year’s Zhaopin survey. Students are also keen on stability and security. The share <code>who rank</code>(~ as first choice:将..作为首选) <code>state-owned enterprises(国有企业)</code> (SOEs) as their first choice has increased for three years <code>in a row(连续)</code> to 47%, <code>compared with</code> 27% who favour a foreign-financed or <code>domestic private firm(国内民营企业)</code>. The remaining quarter wish to work for the government or public institutions.</p><p>The government’s response to record youth unemployment may reinforce(加强) these trends. The State Council(国务院), China’s cabinet(内阁), has urged local governments to recruit as many graduates as their budgets allow. It has also called on enterprises to create at least 1m internships for unemployed youth, <code>in return for(以换取)</code> <code>subsidies(补贴)</code> and <code>tax breaks</code>(税收减免). The offer is open to all firms, but SOEs are most likely to heed the call(听指令,heed the call of duty). These initiatives(举措) risk drawing some of China’s better-educated minds into some of the least efficient parts of its economy.</p><p>But for young folk, <code>stop-gap</code>(权宜之计,临时解决方案) measures do at least alleviate(减轻) some of the worry and confusion. Ms Wang, for example, has combined her studies over the past two years with an internship at a foreign firm. That gave her “something to do every day”, she says, and also led to a satisfying job<br>offer—in human resources. With luck, she will enjoy a long career helping China use those resources better. ■</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        stop-gap    </div>    <div class='spoiler-content'>        <p>词源和历史背景：</p><p>“Stop-gap” 这个词组由两部分组成：“stop” 和 “gap”。其最初的含义与其字面意思相符，即“阻止”（stop）一个“缺口”或“间隙”（gap）。它最初用来描述一个物体，如一个塞子或楔子，用于暂时封闭一个开口或裂缝。</p><p>这个词汇最早的使用可以追溯到16世纪的英格兰，那时它主要被用作名词。在那个时期，人们可能会用物理的“stop-gap”来阻止液体泄漏或保持风不进入某处。</p><p>演变和引申含义：</p><p>随着时间的推移，这个词的用法从物理的“封堵物”扩展到了更抽象的含义，开始用于描述任何临时解决方案或权宜之计。例如，如果一个公司的员工突然离职，而公司又急需找人填补这个空缺，他们可能会雇佣一个临时工作人员作为“stop-gap”，直到他们找到一个长期的替代者。</p><p>在现代英语中，“stop-gap”经常用于描述这种非永久性、快速但可能不完美的解决方法或策略。</p><p>总之，“stop-gap”这个词汇从其最初的物理意义逐渐演变为描述任何临时解决方案或策略的词汇。</p>    </div></div><div class='spoiler collapsed'>    <div class='spoiler-title'>        last_sentence_humor    </div>    <div class='spoiler-content'>        <p>chatgpt:<br>尽管Ms Wang只是一个在外国企业工作的人力资源部员工，但她却被期待能够“帮助中国更好地利用其人力资源”。这种描述似乎暗示了一个讽刺的事实，即中国，一个庞大的国家，目前可能并没有最佳地使用其巨大的人力资源，而Ms Wang，作为一个单一的个体，却被寄予了为整个国家在人力资源方面做出改变的希望。这在某种程度上显得有些夸张和讽刺，因此，从这种视角看，该句可能具有黑色幽默的成分。<br>但是,即使Ms Wang在一个外企的人力资源部门工作，她仍然可以为中国的人力资源做出贡献。这表示，每一个个体，无论其位置如何，都有可能对更大的社区或国家产生正面的影响。此外，她的职位确实为一个年轻人提供了就业机会，从而在一定程度上缓解了就业市场的压力。这句话也同样具有积极性、希望和每个人的潜在价值。</p>    </div></div><p>Subscribers can sign up to Drum Tower, our new weekly newsletter(简报), to understand what the world makes of(看法) China—and what China makes of the world.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
          <category> 阅读 </category>
          
          <category> 经济学人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 失业 </tag>
            
            <tag> 职业规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ai is setting off a great scramble for data 经济学人精读Economist</title>
      <link href="/post/279d.html"/>
      <url>/post/279d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="AI-is-setting-off-a-great-scramble-for-data"><a href="#AI-is-setting-off-a-great-scramble-for-data" class="headerlink" title="AI is setting off a great scramble for data"></a>AI is setting off a great scramble for data</h1><p>Feeding ever-larger models is requiring makers to get creative</p><p>Not so long ago analysts were openly wondering whether artificial intelligence (ai) would be the <code>death of</code>(末日) Adobe, a maker of software for creative types. New tools like dall-e 2 and Midjourney, which <code>conjure up</code>(如魔法般变出) pictures from text, seemed set to <code>render</code>(使看起来) Adobe’s image-editing offerings <code>redundant</code>(冗余). As recently as April, Seeking Alpha, a financial news site, published an article headlined “Is ai the Adobe killer?”</p><p><code>Far from it.</code>(地道表达) Adobe has used its database of hundreds of millions of stock photos to build its own suite(套) of ai tools, dubbed(称为) Firefly. Since its release in March the software has been used to create over 1bn(10^9,十亿) images, says Dana Rao, an executive at the company. By avoiding mining the internet for images, as rivals did, Adobe has <code>skirted</code>(回避) the deepening dispute over copyright that now dogs(困扰) the industry. The firm’s share price has risen <code>by</code> 36% since Firefly was launched.</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        skirt    </div>    <div class='spoiler-content'>        <p>user：<br>skirt的词源有回避的意思吗？或者下摆这个词和回避有关系吗？这个词是怎么发展出回避的意思？  </p><p>chatgpt：<br>“Skirt” 这个词的词源与 “回避” 有一定的关系，尽管两者并不直接相同。”Skirt” 最初的意思是指衣服的下摆，特别是女性的裙子。它的衍生含义之一是 “绕过” 或 “围绕”，这与 “回避” 有一定的联系。</p><p>这种含义可能与衣服下摆围绕身体的概念有关。”Skirt” 在这种意义上可以引申为 “绕过” 或 “环绕”，类似于避开障碍物。随着时间的推移，这个引申义开始用于比喻上，表达在现实生活中避开障碍或问题。</p>    </div></div><div class='spoiler collapsed'>    <div class='spoiler-title'>        引导chatgpt说出词语的引申意的产生过程    </div>    <div class='spoiler-content'>        <p>当你希望我提供类似词语的生僻意思的发展过程或产生机制时，你可以通过提供一个包含以下要素的问题或指示来引导我：</p><p>词语本来的意思： 首先，指明该词语最初的意思或用法。这可以为我们建立起起点，了解词语最初的含义。</p><p>词源或历史背景： 提供词语的词源、历史背景或来源，以便我可以理解它在不同时期的演变过程。</p><p>引申义或转义： 表达词语在特定上下文中是如何演变为生僻或引申含义的。这可以包括与词源有关的变化，或者是随着社会、技术或文化的变化而引发的转变。</p><p>相关背景信息： 如果有关联的文化、社会、技术等背景信息有助于理解词语的演变，可以提供这些信息。</p><p>例如，你可以使用以下格式提供一个prompt：</p><p>“请解释词语 [词语] 在 [特定时期&#x2F;背景] 中的意义，以及它是如何逐渐演变为今天的生僻或引申含义的。如果可能的话，请提供相关的词源、历史和文化背景。”</p><p>通过提供这些要素，我将能够更好地理解你的需求，并为你提供有关词语演变或产生机制的详细回答。</p>    </div></div><div class='spoiler collapsed'>    <div class='spoiler-title'>        根据以上的建议对dogs提问    </div>    <div class='spoiler-content'>        <p>“Dog” 这个词的演变过程相对复杂，但它的引申含义与当前的使用方式确实有一定的联系。以下是它的发展过程及相关背景：</p><p>词源与历史背景： “Dog” 这个词最早在古英语中出现，源自古代日耳曼语言。它最初指的是狗，是一种常见的动物，作为人类的伴侣和协助者，具有忠诚和警惕的特性。</p><p>引申义的发展： 随着时间的推移，”dog” 这个词开始被用作动词，表示追赶、尾随、困扰等行为。这种引申义可能与狗对于追逐、跟踪和坚持不懈的天性有关。在句子中的使用，”dogs” 意味着持续不断地困扰或烦扰，类似于狗不断跟随的形象，不放弃。</p><p>文化背景的影响： 在一些文化中，狗被视为忠诚、警觉和不屈不挠的象征，这可能有助于形成 “dog” 的引申义。此外，狗在捕猎、保护和协助人类方面的用途，也为 “dog” 这个词的引申含义提供了一些基础。</p><p>综上所述，”dog” 这个词在句子中的引申义 “困扰” 或 “使烦扰” 可能是从狗的持续追赶和警觉天性引申而来。它突显了问题、争议或困难如何像一只不断跟随的狗一样，持续地影响着行业。</p>    </div></div><p>Adobe’s triumph over the doomsters(末日论者) illustrates a wider point about the contest for dominance in the fast-developing market for ai tools. The supersized(超大的) models powering the latest wave of so-called “generative” ai rely on gargantuan(海量的) amounts of data. Having already <code>helped themselves to </code>(<code>treat oneself to</code> x   <code>帮助自己获取</code> √ <code>未经许可地占用</code> √ ) much of the internet—often without permission—model builders are now seeking out new data sources to sustain the feeding frenzy(狂热). Meanwhile, companies with vast <code>troves</code>(贮藏) of the stuff are weighing up(权衡) how best to profit from it. A data land grab is under way.</p><p>The two essential ingredients for an ai model are datasets, on which the system is trained, and processing power, through which the model detects relationships within and among those datasets. Those two ingredients are, to an extent, substitutes(这里指相互替代): a model can be improved either by ingesting more data or adding more processing power. The latter, however, is becoming difficult amid(正处当下) a shortage in specialist ai chips, leading model builders to be <code>doubly focused</code>(加倍专注于) on seeking out data.</p><p>Demand for data is growing so fast that the stock of high-quality text available for training may be exhausted by 2026, reckons(估计) Epoch ai, a research outfit(机构). The latest ai models from Google and Meta, two tech giants, are believed to have been trained on over 1trn words. By comparison, the sum total of English words on Wikipedia, an online encyclopedia, is about 4bn.</p><p>It is not only the size of datasets that counts. The better the data, the better the model. Text-based models are ideally trained on long-form, well-written, factually(fact) accurate writing, notes(指出) Russell Kaplan of Scale ai, a data startup. Models <code>that are fed this information</code>(feed 作为及物动词,不需要介词.She feeds the cat bread every morning. When a baby is thirsty, it feeds more often.) are more likely to produce similarly high-quality output. Likewise, <code>ai chatbots give better answers when asked to explain their working step-by-step, increasing demand for sources like textbooks that do that, too.</code>(<strong>这也增加了对像教科书这样的资源的需求，因为教科书提供一步一步地解释</strong>,而不是翻译成:增加了对资源的需求,就像教科书(在一步一步解释时所需要更多纸和墨水作为资源)那样) Specialised information sets are also prized(很有价值), as they allow models to be “fine-tuned” for more niche applications. Microsoft’s purchase of GitHub, a repository for software code, for $7.5bn in 2018 helped it develop a code-writing ai tool.(copilot)</p><p>As demand for data grows, accessing it is getting trickier, with content creators now demanding compensation(赔偿) for material that has been ingested(吸收) into ai models. A number of copyright-infringement(侵犯) cases have already been brought against model builders in America. A group of authors, including Sarah Silverman, a comedian, are suing Openai, maker of Chatgpt, an ai chatbot, and Meta. A group of artists are similarly suing Stability ai, which builds text-to-image tools, and Midjourney.</p><p>The upshot(结果) of all this has been a flurry(一连串) of dealmaking as ai companies race to <code>secure</code> data sources. In July Openai inked(签署) a deal with Associated Press, a news agency, to access its archive of stories(新闻). It has also recently expanded an agreement with Shutterstock, a provider of stock photography, with whom Meta has a deal, too.(Meta也与后者达成了协议。) On August 8th it was reported that Google was in discussions with Universal Music, a record <code>label</code>, to license artists’ voices to feed a songwriting ai tool. Fidelity, an asset manager, has said that it has been approached by tech firms asking for access to its financial data. Rumours(传言) swirl about ai labs approaching the bbc, Britain’s public broadcaster, for access to its archive of images and films. Another supposed target is jstor, a digital library of academic journals.</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        secure    </div>    <div class='spoiler-content'>        <p>这里的 “secure” 强调的是确保获得数据来源的权利或机会，通常与竞争、争夺等紧张的情况相关。它传达了公司正在努力获得数据来源的含义。</p>    </div></div><p><code>Holders of information are taking advantage of their greater bargaining power. </code>Reddit, a discussion forum, and Stack Overflow(栈溢出), a question-and-answer site popular with coders, have increased the cost of access to their data. <code>Both websites are particularly valuable</code> because users “upvote”(点赞) preferred answers, helping models know which are most relevant. Twitter (now known as X), a social-media site, has put in place measures to limit the ability of bots to scrape(爬虫,刮) the site and now charges anyone who wishes to access its data. Elon Musk, its <code>mercurial</code> owner, is planning to build his own ai business using the data.</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        mercurial    </div>    <div class='spoiler-content'>        <p>“Mercurial” 这个词通常用来形容性格或行为反应多变、不稳定、难以预测的人。在这个上下文中，”mercurial owner” 指的是具有多变性格、善变的业主，暗示 Elon Musk 在性格上可能表现出不稳定或难以预测的特质。</p>    </div></div><p><code>As a consequence</code>, model builders are working hard to improve the quality of the inputs they already have. Many ai labs employ <code>armies of</code> data annotators(注释, 匿名者: anonym) to perform tasks(执行任务) such as labelling images and rating answers. Some of that work is complex; an advert for one such job seeks applicants with a master’s degree or doctorate in life sciences. But much of it is mundane(平凡), and is being outsourced(外包) to places such as Kenya where labour is cheap.</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        博士学位?有这么夸张吗    </div>    <div class='spoiler-content'>        <p>一些高度科学化、技术性强的职位可能确实需要深入的专业知识和研究背景，因此要求更高的学历也是合理的。</p>    </div></div><p>ai firms are also gathering data via users’ interactions with their tools. Many of these have some form of feedback mechanism, where users <code>indicate</code>(指出) which outputs are useful. Firefly’s text-to-image generator allows users to pick from one of four options. Bard, Google’s chatbot, similarly proposes three answers. Users can give Chatgpt a thumbs up or thumbs down when it replies to queries. That information can be fed back as an input into the underlying model(底层模型), forming what Douwe Kiela, co-founder of Contextual ai, a startup, calls the “data flywheel”(飞轮). A stronger signal <code>still</code> of the quality of a chatbot’s answers is whether users copy the text and paste it elsewhere, he adds. Analysing such information helped Google rapidly improve its translation tool.</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        still    </div>    <div class='spoiler-content'>        <blockquote><p>1 still可以替换成哪些词?</p></blockquote><p>A stronger signal moreover&#x2F;yet&#x2F;even more&#x2F;furthermore&#x2F;additionally&#x2F;more pronounced&#x2F;&#x2F;compelling&#x2F;&#x2F;distinct of the quality of a chatbot’s answers is whether users copy the text and paste it elsewhere, he adds.</p><blockquote><p>2 still的主要含义?</p></blockquote><ul><li>在这个上下文中，”still” 表示进一步、更加强烈或更突出的程度。这个句子的意思是，一个聊天机器人回答的质量更强烈地体现在用户是否会将文本复制并粘贴到其他地方。<br>“Still” 在这里用作副词，用来强调前面所述的情况，并且表达更加深入的程度.</li><li>它最初起源于古英语 “stille”，意为 “motionless” 或 “not moving”。随着时间的推移，它逐渐演变为表示 “inactive”、”quiet” 或 “calm”。随着更多的语境使用和语义发展，它获得了更多的含义，包括 “even so”、”nevertheless” 和 “yet”，用于引出对比或补充信息的情况。</li><li><ul><li>Contrast（对比）：</li></ul></li></ul><p>“She was tired, but still managed to finish her work.”<br>“The weather was cold, but they still went for a hike.”  </p><ul><li><ul><li>Concession（让步）：</li></ul></li></ul><p>“I know it’s risky, but I still believe we should try.”<br>“He had little experience, but he still performed exceptionally well.”</p><ul><li><ul><li>Emphasis（强调）：</li></ul></li></ul><p>“Even in the face of challenges, she still persevered.”<br>“Despite the odds, they still achieved their goal.”</p><ul><li><ul><li>Continuation（继续）：</li></ul></li></ul><p>“The rain was pouring, but the team still continued with the outdoor event.”<br>“The concert was delayed, but the audience still waited patiently.”</p><ul><li><ul><li>Nevertheless（然而、尽管如此）：</li></ul></li></ul><p>“The movie received mixed reviews, but it was still a box office success.”<br>“The plan was risky; nevertheless, they decided to proceed.”</p><ul><li><ul><li>Yet（然而、但是）：</li></ul></li></ul><p>“He was exhausted, yet he still managed to give a great presentation.”<br>“It was late, yet they continued working on the project.”</p><blockquote><p>3 如何发展出”更”这层含义?</p></blockquote><p>强调：<br>“Still” 最初被用于强调某事的稳定性或特殊性。在描述某种状态或情况时，它可能暗示这种状态的保持不变。这种强调的特性为后来的含义奠定了基础。</p><p>对比：<br>随着语言的发展，人们开始将 “still” 用于引出对比情况。在描述两种情况之间的不同之处时，”still” 可以用来指出一个特定的状态，尽管有其他情况的存在。这就是 “尽管如此” 或 “然而” 的一种含义。</p><p>加强、更进一步：<br>从对比的角度来看，当人们使用 “still” 来强调一个状态，尤其是在与其他可能情况对比时，它的含义逐渐发展为 “更加强烈” 或 “更进一步”。这是因为 “still” 被用来突出一种状态，以至于它似乎超越了其他可能性，进一步加强了表达的程度。</p>    </div></div><p>Expanding the frontier<br>There is, however, one source of data that remains largely untapped(未开封的&#x2F;未使用的): the information that exists within the walls of the <code>tech firms</code>’ <code>corporate customers</code>. Many businesses possess(拥有), often unwittingly(不知不觉), vast amounts of useful data, from call-centre transcripts(记录) to customer spending records. Such information is especially valuable because it can be used to fine-tune models for specific business purposes, like helping call-centre workers answer customers’ queries or business analysts(业务分析师) spot ways to boost sales.</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        如何理解exist within the walls    </div>    <div class='spoiler-content'>        <p>There is, however, one source of data that remains largely untapped(未开封的&#x2F;未使用的): the information that exists within the walls of the tech firms’ corporate customers.<br>在这个句子中，”exists within the walls of” 是一个比喻表达，它意味着数据存在于某个特定的地方或实体内部，并且暗示这些数据可能尚未被充分利用或发掘。具体来说，这里使用的比喻是把数据比作被墙壁包围的东西，强调了数据的隐蔽性和未被开发的潜力。</p>    </div></div><p>Yet making use of that rich resource is not always straightforward. Roy Singh of <code>Bain</code>, a consultancy, notes that most firms have historically paid little attention to the types of vast but unstructured datasets that would prove(被证明,主动表被动) most useful for training ai tools. Often these are spread across multiple systems, buried in company servers rather than in the cloud.</p><p>Unlocking that information would help companies customise ai tools to better serve their specific needs. Amazon and Microsoft, two tech giants, now offer tools to help companies better manage their unstructured datasets, <code>as does Google</code>. Christian Kleinerman of Snowflake, a database firm, says that business is booming as clients look to “tear down data silos”(打破数据孤岛). Startups are piling in(涌入). In April Weaviate, an ai-focused database business, raised $50m at a value of $200m(以价值 2 亿美元筹集了 5000 万美元的资金). Barely a week later PineCone, a rival, raised $100m at a valuation of $750m. Earlier this month Neon, another database startup, raised an additional $46m in funding. <code>The scramble for data is only just getting started. </code></p><div class='spoiler collapsed'>    <div class='spoiler-title'>        文章总结    </div>    <div class='spoiler-content'>        <blockquote><p>(我)文章总结:<br>介绍了当今模型训练企业对于数据的挖掘&#x2F;收集&#x2F;占领的态势,并且强调了优质的数据集(数据本身的标记&#x2F;优质数据的标志&#x2F;未引起关注的重要优质数据)对于优秀模型的重要程度,同时也关注了对于数据版权的隐私保护与侵犯的话题,包括公司之间的协议与合作等角度也有探讨,充分展现了深度学习领域的朝阳发展态势.</p><p>chatgpt的建议:<br>1 在总结中，强调文章的核心主题，即人工智能模型训练所需数据的挖掘和竞争。<br>2 提及文章中强调的优质数据的重要性，以及如何利用数据来优化模型的效果。<br>3 引入文章中关于数据隐私和版权问题的讨论，表明模型构建者在数据获取方面面临的挑战。<br>4 提及企业之间的合作、竞争和战略，突出文章中提到的主要公司和他们的举动。<br>5 最后强调，这场关于数据的争夺才刚刚开始，显示人工智能领域的前景和发展。  </p><p>chatgpt的示范:<br>这篇文章深入探讨了当前人工智能模型训练领域的一场激烈的数据竞争。在不久之前，人们还在质疑人工智能是否会威胁到某些领域，比如Adobe这样的创意软件公司。然而，现实却显示出Adboe通过建立自己的ai工具套件，充分利用其庞大的图库数据，成功应对了这一挑战。文章揭示了人工智能模型所需的两个关键要素：数据集和处理能力。尽管这两者在一定程度上可以相互替代，但数据的重要性越来越受到重视，尤其是高质量的、经过精心标记的数据。然而，获取数据并不是一件容易的事，因为数据隐私和版权问题也受到越来越多的关注。企业需要寻找各种途径来获取数据，包括合作协议和数据源的开发。同时，数据管理和优化工具也逐渐成为一种需求，以确保数据得到高效利用。尽管当前的竞争激烈，但人工智能模型训练领域的数据争夺才刚刚开始，前景依然令人兴奋。</p></blockquote>    </div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
          <category> 阅读 </category>
          
          <category> 经济学人 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第二章物理层</title>
      <link href="/post/8170.html"/>
      <url>/post/8170.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>解决如何连接各种计算机之间传输数据的比特流，而不是指具体的传输媒体（传输介质，第0层</p><blockquote><p>主要任务：确定接口的特性</p></blockquote><ul><li><strong>机械特性</strong>：接口形状，规格，引线数目，引脚数量</li><li><strong>电气特性</strong>：电压范围，阻抗匹配，传输速率，距离限制（有具体的数据，例如+10<del>+15V表示二进制0，-10</del>-15V表示二进制1，电线长度咸鱼15m以内）</li><li><strong>功能特性</strong>：描述某电平时的含义（没有数据）</li><li><strong>规程特性</strong>：各线路的工作规程和时序关系</li></ul><h2 id="典型的数据通信模型"><a href="#典型的数据通信模型" class="headerlink" title="典型的数据通信模型"></a>典型的数据通信模型</h2><img src="/post/8170/%E5%85%B8%E5%9E%8B%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B.png" class="" title="典型通信模型"><p>信源，发送器，传输系统，接收器，信宿(su)</p><p>数据data：不用处理人就能理解<br>信号：</p><ul><li>数字信号(离散信号)：类似脉冲</li><li>模拟信号(连续信号)：类似正弦</li></ul><p>信道：包含一条发送信道，一条接收信道<br>　　分类：  </p><ul><li>传输信号：模拟信道，数字信道</li><li>传输介质：无线（频段）、有线</li></ul><h2 id="设计通信系统要考虑的三个问题"><a href="#设计通信系统要考虑的三个问题" class="headerlink" title="设计通信系统要考虑的三个问题"></a>设计通信系统要考虑的三个问题</h2><h3 id="单双工？"><a href="#单双工？" class="headerlink" title="单双工？"></a>单双工？</h3><p>单工：广播模型<br>半双工：对讲机模型，同一时刻只有一方发送一方接收<br>全双工：电话模型，同一时刻可以有两方发送接收  </p><h3 id="串行or并行？"><a href="#串行or并行？" class="headerlink" title="串行or并行？"></a>串行or并行？</h3><p>串行：一条比特流由低到高依次发送(<code>速度慢，费用低，远距离</code>)<br>并行：一个字符的八位二进制数同时由8条比特流发送(<code>速度快，费用高，近距离</code>)</p><h3 id="同步or异步？"><a href="#同步or异步？" class="headerlink" title="同步or异步？"></a>同步or异步？</h3><p>同步传输：数据以区块为单位，以若干个同步字符打头，用于调整时钟<br>异步传输：比特（8的倍数）以小组为单位，接收端不<code>提前</code>知道数据何时开始，有一个字符起始位和一个字符终止位。（例如0表示数据起始位，1表示终止位。）</p><h2 id="码元，速率，波特，带宽"><a href="#码元，速率，波特，带宽" class="headerlink" title="码元，速率，波特，带宽"></a>码元，速率，波特，带宽</h2><h3 id="码元"><a href="#码元" class="headerlink" title="码元"></a>码元</h3><p>固定<code>时长</code>的<code>信号</code>波形（数字脉冲），是数字信号的计量单位，该时长称为码元宽度。M种离散状态-&gt; M进制码元。<br>对于k进制码元，一个码元可以携带的信息量：log(2,k)(k &gt;&#x3D; 2)个比特.</p><h3 id="波特，速率：码元速率vs信息传输速率"><a href="#波特，速率：码元速率vs信息传输速率" class="headerlink" title="波特，速率：码元速率vs信息传输速率"></a>波特，速率：码元速率vs信息传输速率</h3><blockquote><p>码元传输速率&#x2F;波形速率&#x2F;调制速率&#x2F;符号速率 单位：Baud，波特<br>单位时间（s）传输的码元个数，与进制数无关。<br><strong>R</strong>B &#x3D; 1&#x2F;T (B)</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        例    </div>    <div class='spoiler-content'>        <p>2s传输4800码元，求码元速率？<br>4800 &#x2F; 2 &#x3D; 2400(Baud)</p>    </div></div><blockquote><p>信息传输速率<br>单位时间传输的比特。对于二进制，信息传输速率等于码元传输速率。对于其他进制：若一个码元携带n bit信息，则M Baud 的码元传输速率： M*n bit&#x2F;s .</p></blockquote><h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><div class='spoiler collapsed'>    <div class='spoiler-title'>        信道带宽: 模拟信号语境    </div>    <div class='spoiler-content'>        <p>输入信号的频率高&#x2F;低到一定程度，使得输出功率&#x3D; 1&#x2F;2*输入功率，则这个频率高低的差值就是通频带宽，单位赫兹，Hz。</p>    </div></div><p>表示最高数据率，通信线路传输能力，bps（b&#x2F;s）</p><h2 id="失真"><a href="#失真" class="headerlink" title="失真"></a>失真</h2><p>失真：可识别&#x2F;不可识别</p><ul><li>宽带受限</li><li>码元传输过快（等效于频率过高）（变换快，分不清）</li><li>距离过远</li><li>传输媒体质量</li><li>有噪声干扰</li></ul><h1 id="奈式准则-香农定理-带宽：Hz"><a href="#奈式准则-香农定理-带宽：Hz" class="headerlink" title="奈式准则 &amp; 香农定理 带宽：Hz"></a>奈式准则 &amp; 香农定理 带宽：Hz</h1><img src="/post/8170/%E5%A5%88%E5%BC%8F%E5%87%86%E5%88%99.png" class="" title="奈式准则"><img src="/post/8170/%E5%A5%88%E5%BC%8F%E4%BE%8B%E9%A2%98.png" class="" title="奈式例题"><img src="/post/8170/%E9%A6%99%E5%86%9C%E5%AE%9A%E7%90%86.png" class="" title="香农定理"><img src="/post/8170/%E9%A6%99%E5%86%9C%E5%AE%9A%E7%90%86%E5%9B%A0%E7%B4%A0.png" class="" title="香农定理因素"><img src="/post/8170/%E9%A6%99%E5%86%9C%E4%BE%8B%E9%A2%98.png" class="" title="香农例题"><img src="/post/8170/%E9%A6%99%E5%86%9Cvs%E5%A5%88%E5%BC%8F.png" class="" title="香农vs奈式"><h1 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h1><div class='spoiler collapsed'>    <div class='spoiler-title'>        宽带信号vs基带信号    </div>    <div class='spoiler-content'>        <p><a herf="https://zhidao.baidu.com/question/90134430.html">高赞回答</a></p><p>数字信号是离散信号，一般所指的数字信号是二进制数字信号，分别用两个不同的参量代表0和1，如+5V电压代表1，-5V电压代表0，或者以电流的通代表1，断代表0等，每一个数字信号叫比特，8个比特为一个字节，1024个字节叫1兆(M)，1024兆叫1吉（G），1024吉叫1特（T）等等。我们平时的任何信号，声音，图像，视频都能通过数字技术进行数字化，通常的步骤就是用高频脉冲信号进行抽样，再量化，编码，调制，然后传输。</p><p>模拟信号就是用电流或电压的大小直接模拟被测量，如声音信号，用电流的频率直接反映声音的频率，电流的强弱直接反映声音的分贝值，模拟信号是连续的信号。</p><p>基带信号就是把数字信号不经过调制，直接进行传输，它区别于频带信号，频带信号是把基带信号加载在载波上传输，基带信号的频带很宽(理论上是无限宽)，但由于带通原因，几乎不存在无限带宽的传输媒体，所以基带信号无法在普通介质上进行远距离传输，否则码间干扰和衰减无法使信号得到恢复，所以用载波对基带信号进行调制，减小带宽，可以使信号可靠传输，减小衰减，接受端再进行解调还原原来的数字信号。</p><p>所谓带宽是指一个信号的频谱宽度，即它可以分解成的所有正弦波的频率的总合，载波频率较为单一，因此调制后的信号的带宽较小。</p><p>宽带信号是一个相对概念，它是指它的传输介质具有很宽的带通能力，这样的好处就是能够在一路传输介质上复用很多的信号，节省线路铺设的成本，在宽带介质上传输的信号就叫宽带信号了。目前带宽最宽的介质时单模光纤。</p>    </div></div><img src="/post/8170/%E5%AE%BD%E5%B8%A6%E4%BF%A1%E5%8F%B7.png" class="" title="宽带信号"><p>数据-&gt; 数字信号  编码 (from 数字:数字发送器or from 模拟:PCM编码器)<br>数据-&gt; 模拟信号 调制 (from 数字:调制器or from 模拟:放大器调制器)<br>数字信号-&gt; 模拟信号 DA转换 （Digital-to-Analog Conversion，缩写为DAC）</p><h2 id="数字数据to数字信号"><a href="#数字数据to数字信号" class="headerlink" title="数字数据to数字信号"></a>数字数据to数字信号</h2><img src="/post/8170/%E5%85%AD%E7%A7%8D%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F.png" class="" title="六种编码方式"><p>曼彻斯特编码,低到高跳变表示“1”，从高到低跳变表示“0”。还有一种是差分曼彻斯特编码，每位中间的跳变仅提供时钟定时，而用每位开始时有无跳变表示“0”或“1”，有跳变为“0”，无跳变为“1”。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        为什么好的编码需要包含时钟信息?难道信号在传输的过程中会压缩时空吗?    </div>    <div class='spoiler-content'>        <p>ChatGPT<br>好的编码需要包含时钟信息，是为了确保接收端能够准确地解析和恢复传输的数据。时钟信息帮助接收端知道何时开始解码每个码元，从而正确地还原原始信号。</p><p>在数字通信中，信号在传输过程中不会真正地被”压缩”或”扭曲”时空，但是存在一些问题可能会导致接收端难以正确地解析数据，其中之一就是时钟同步问题。</p><p>考虑一个情况，如果发送端的时钟和接收端的时钟不完全同步，即时钟漂移，那么接收端可能在解析码元时会产生偏差。没有准确的时钟信息，接收端很难知道何时开始和结束解码每个码元，这可能导致解码错误。因此，引入时钟信息可以帮助接收端进行同步，确保正确地解析数据。</p><p>此外，时钟信息还有助于处理不同传输速率之间的适应性。在一些情况下，发送端和接收端的传输速率可能不完全一致，时钟信息可以帮助接收端调整解码的时机，以适应传输速率的变化。</p><p>总之，时钟信息在编码中的作用是确保接收端能够在正确的时机解码数据，从而准确地恢复原始信号。这有助于克服时钟同步问题和适应不同传输速率的挑战。</p>    </div></div><h2 id="数字信号to模拟信号"><a href="#数字信号to模拟信号" class="headerlink" title="数字信号to模拟信号"></a>数字信号to模拟信号</h2><img src="/post/8170/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7to%E6%A8%A1%E6%8B%9F%E4%BF%A1%E5%8F%B7.png" class=""><p>调幅+调相(QAM)</p><h2 id="模拟数据to数字信号"><a href="#模拟数据to数字信号" class="headerlink" title="模拟数据to数字信号"></a>模拟数据to数字信号</h2><p>最典型的例子就是对音频信号进行编码的脉码调制(PCM)，在计算机应用中，能够达到最高保真水平的就是PCM编码，被广泛用于素材保存及音乐欣赏，CD、DVD以及我们常见的WAV文件中均有应用、它主要包括三步:抽样、量化、编码。</p><p>抽样：对模拟信号周期性扫描，把时间上连续的信号变成时间上离散的信号。<br>为了使所得的离散信号能无失真地代表被抽样的模拟数据，要使用采样定理进行采样:<br><strong>f</strong>采样频率 ≥ 2<strong>f</strong>信号最高频率</p><p>量化：把抽样取得的电平幅值按照一定的分级标度转化为对应的数字值，并取<br>整数，这就把连续的电平幅值转换为离散的数字量。</p><p>编码：把量化的结果转换为与之对应的二进制编码。</p><h2 id="模拟数据调制为模拟信号"><a href="#模拟数据调制为模拟信号" class="headerlink" title="模拟数据调制为模拟信号"></a>模拟数据调制为模拟信号</h2><p>为了实现传输的有效性，可能需要较高的频率。这种调制方式还可以使用频分复用技术，充分利用带宽资源。在电话机和本地交换机所传输的信号是采用模拟信号传输模拟数据的方式;模拟的声音数据是加载到模拟的载波信号中传输的。</p><h1 id="数据交换"><a href="#数据交换" class="headerlink" title="数据交换"></a>数据交换</h1><table><thead><tr><th>特点</th><th>电路交换</th><th>报文交换</th><th>分组交换(数据包方式)</th><th>分组交换(虚电路方式)</th></tr></thead><tbody><tr><td><strong>基本思想</strong></td><td>为通信双方建立一个固定的通路</td><td>把整个报文作为一个单位进行转发</td><td>把数据划分为包，每个数据包独立转发</td><td>建立虚电路后，数据包按顺序转发</td></tr><tr><td><strong>连接时延</strong></td><td>通常较长，需要预先建立连接</td><td>无需预先建立连接</td><td>无需预先建立连接</td><td>需要预先建立虚电路</td></tr><tr><td><strong>资源占用</strong></td><td>通话期间占用固定带宽(独占)</td><td>根据报文大小动态分配</td><td>数据包大小动态分配</td><td>按数据包大小动态分配</td></tr><tr><td><strong>适用场景</strong></td><td>实时通信，如电话(数字信号或者模拟信号)</td><td>不频繁的、一次性的数据传输(仅数字信号)</td><td>大规模、动态的网络环境，如互联网</td><td>介于数据包方式和电路交换之间的场景</td></tr><tr><td><strong>效率</strong></td><td>在低通话负载下效率低,但是无储存能力</td><td>动态,提高线路利用率,且可多目标,但有转发时延</td><td>可以很高，取决于网络负载</td><td>取决于虚电路建立和维护的开销</td></tr><tr><td><strong>可靠性</strong></td><td>较高，全双工,有固定通路,但是灵活性差,故障须重新建立连接</td><td>动态调整,可靠</td><td>无保障，需要高层协议如TCP来确保</td><td>比数据包方式更有序，但需要维护虚电路状态</td></tr><tr><td><strong>顺序</strong></td><td>保证数据顺序</td><td>保证报文顺序</td><td>不保证数据包顺序</td><td>保证数据包顺序</td></tr></tbody></table><h1 id="传输介质"><a href="#传输介质" class="headerlink" title="传输介质"></a>传输介质</h1><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从比较器窥见java和c++的语言特性</title>
      <link href="/post/6611.html"/>
      <url>/post/6611.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于左老师的课上用的是java来教授，而我比较熟悉c++，所以我在借助gpt帮我将代码改为c++的同时，还和它对两种语言的相同和不同之处进行了比较详细的探讨。<br>探讨的内容包括：</p><ul><li>比较器的返回值差异</li><li>函数对象声明的区别</li><li>优雅 - 翩翩起舞的 lambda</li><li>java 的 key 都是什么意思  </li><li>c++: auto vs it JAVA 的良好特性——默认传递引用、数组自带大小信息<blockquote><p>这是来自左老师的比较器代码（JAVA）</p></blockquote></li></ul><div class='spoiler collapsed'>    <div class='spoiler-title'>        java    </div>    <div class='spoiler-content'>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code01_Comparator</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> id, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任何比较器：</span></span><br><span class="line"><span class="comment">// compare方法里，遵循一个统一的规范：</span></span><br><span class="line"><span class="comment">// 返回负数的时候，认为第一个参数应该排在前面</span></span><br><span class="line"><span class="comment">// 返回正数的时候，认为第二个参数应该排在前面</span></span><br><span class="line"><span class="comment">// 返回0的时候，认为无所谓谁放前面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IdShengAgeJiangOrder</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Student&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据id从小到大，但是如果id一样，按照年龄从大到小</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> o1.id != o2.id ? (o1.id - o2.id) : (o2.age - o1.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IdAscendingComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Student&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回负数的时候，第一个参数排在前面</span></span><br><span class="line"><span class="comment">// 返回正数的时候，第二个参数排在前面</span></span><br><span class="line"><span class="comment">// 返回0的时候，谁在前面无所谓</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> o1.id - o2.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IdDescendingComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Student&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> o2.id - o1.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先按照id排序，id小的，放前面；</span></span><br><span class="line"><span class="comment">// id一样，age大的，前面；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IdInAgeDe</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Student&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> o1.id != o2.id ? o1.id - o2.id : (o2.age - o1.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printStudents</span><span class="params">(Student[] students)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Name : &quot;</span> + student.name + <span class="string">&quot;, Id : &quot;</span> + student.id + <span class="string">&quot;, Age : &quot;</span> + student.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(Integer[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyComp</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> o2 - o1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AComp</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果返回负数，认为第一个参数应该拍在前面</span></span><br><span class="line"><span class="comment">// 如果返回正数，认为第二个参数应该拍在前面</span></span><br><span class="line"><span class="comment">// 如果返回0，认为谁放前面都行</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer arg0, Integer arg1)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> arg1 - arg0;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">Integer[] arr = &#123; <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">AComp</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;===========================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;A&quot;</span>, <span class="number">4</span>, <span class="number">40</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;B&quot;</span>, <span class="number">4</span>, <span class="number">21</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;C&quot;</span>, <span class="number">3</span>, <span class="number">12</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;D&quot;</span>, <span class="number">3</span>, <span class="number">62</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;E&quot;</span>, <span class="number">3</span>, <span class="number">42</span>);</span><br><span class="line"><span class="comment">// D E C A B</span></span><br><span class="line"></span><br><span class="line">Student[] students = <span class="keyword">new</span> <span class="title class_">Student</span>[] &#123; student1, student2, student3, student4, student5 &#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;第一条打印&quot;</span>);</span><br><span class="line"></span><br><span class="line">Arrays.sort(students, <span class="keyword">new</span> <span class="title class_">IdShengAgeJiangOrder</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; students.length; i++) &#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> students[i];</span><br><span class="line">System.out.println(s.name + <span class="string">&quot;,&quot;</span> + s.id + <span class="string">&quot;,&quot;</span> + s.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;第二条打印&quot;</span>);</span><br><span class="line">ArrayList&lt;Student&gt; studentList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">studentList.add(student1);</span><br><span class="line">studentList.add(student2);</span><br><span class="line">studentList.add(student3);</span><br><span class="line">studentList.add(student4);</span><br><span class="line">studentList.add(student5);</span><br><span class="line">studentList.sort(<span class="keyword">new</span> <span class="title class_">IdShengAgeJiangOrder</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; studentList.size(); i++) &#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> studentList.get(i);</span><br><span class="line">System.out.println(s.name + <span class="string">&quot;,&quot;</span> + s.id + <span class="string">&quot;,&quot;</span> + s.age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// N * logN</span></span><br><span class="line">System.out.println(<span class="string">&quot;第三条打印&quot;</span>);</span><br><span class="line">student1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;A&quot;</span>, <span class="number">4</span>, <span class="number">40</span>);</span><br><span class="line">student2 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;B&quot;</span>, <span class="number">4</span>, <span class="number">21</span>);</span><br><span class="line">student3 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;C&quot;</span>, <span class="number">4</span>, <span class="number">12</span>);</span><br><span class="line">student4 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;D&quot;</span>, <span class="number">4</span>, <span class="number">62</span>);</span><br><span class="line">student5 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;E&quot;</span>, <span class="number">4</span>, <span class="number">42</span>);</span><br><span class="line">TreeMap&lt;Student, String&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;((a, b) -&gt; (a.id - b.id));</span><br><span class="line">treeMap.put(student1, <span class="string">&quot;我是学生1，我的名字叫A&quot;</span>);</span><br><span class="line">treeMap.put(student2, <span class="string">&quot;我是学生2，我的名字叫B&quot;</span>);</span><br><span class="line">treeMap.put(student3, <span class="string">&quot;我是学生3，我的名字叫C&quot;</span>);</span><br><span class="line">treeMap.put(student4, <span class="string">&quot;我是学生4，我的名字叫D&quot;</span>);</span><br><span class="line">treeMap.put(student5, <span class="string">&quot;我是学生5，我的名字叫E&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Student s : treeMap.keySet()) &#123;</span><br><span class="line">System.out.println(s.name + <span class="string">&quot;,&quot;</span> + s.id + <span class="string">&quot;,&quot;</span> + s.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><div class='spoiler collapsed'>    <div class='spoiler-title'>        gpt优化后的c++代码    </div>    <div class='spoiler-content'>        <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    std::string name;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Student</span>(<span class="type">const</span> std::string&amp; name, <span class="type">int</span> id, <span class="type">int</span> age)</span><br><span class="line">        : <span class="built_in">name</span>(name), <span class="built_in">id</span>(id), <span class="built_in">age</span>(age) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Comparator functions</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">idShengAgeJiangOrder</span><span class="params">(<span class="type">const</span> Student&amp; o1, <span class="type">const</span> Student&amp; o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> o1.id != o2.id ? (o1.id &lt; o2.id) : (o2.age &lt; o1.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">idAscendingComparator</span><span class="params">(<span class="type">const</span> Student&amp; o1, <span class="type">const</span> Student&amp; o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> o1.id &lt; o2.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">idDescendingComparator</span><span class="params">(<span class="type">const</span> Student&amp; o1, <span class="type">const</span> Student&amp; o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> o2.id &lt; o1.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">idInAgeDe</span><span class="params">(<span class="type">const</span> Student&amp; o1, <span class="type">const</span> Student&amp; o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> o1.id != o2.id ? (o1.id &lt; o2.id) : (o2.age &lt; o1.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">acomp</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; a, <span class="type">const</span> <span class="type">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudents</span><span class="params">(<span class="type">const</span> std::vector&lt;Student&gt;&amp; students)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> Student&amp; student : students) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Name: &quot;</span> &lt;&lt; student.name &lt;&lt; <span class="string">&quot;, Id: &quot;</span> &lt;&lt; student.id &lt;&lt; <span class="string">&quot;, Age: &quot;</span> &lt;&lt; student.age &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArray</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; arr = &#123; <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Using the AComp comparator</span></span><br><span class="line">    <span class="comment">//std::sort(arr.begin(), arr.end(), [](int a, int b) &#123; return b &lt; a; &#125;);</span></span><br><span class="line">    std::<span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), acomp);</span><br><span class="line">    <span class="built_in">printArray</span>(arr);</span><br><span class="line"></span><br><span class="line">    std::vector&lt;Student&gt; students = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;A&quot;</span>, <span class="number">4</span>, <span class="number">40</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;B&quot;</span>, <span class="number">4</span>, <span class="number">21</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;C&quot;</span>, <span class="number">3</span>, <span class="number">12</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;D&quot;</span>, <span class="number">3</span>, <span class="number">62</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;E&quot;</span>, <span class="number">3</span>, <span class="number">42</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Using the idShengAgeJiangOrder comparator</span></span><br><span class="line">    std::<span class="built_in">sort</span>(students.<span class="built_in">begin</span>(), students.<span class="built_in">end</span>(), idShengAgeJiangOrder);</span><br><span class="line">    <span class="built_in">printStudents</span>(students);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Using a map with id as key and Student as value</span></span><br><span class="line">    <span class="function">std::map&lt;Student, std::string, <span class="title">decltype</span><span class="params">(idAscendingComparator)</span>*&gt; <span class="title">studentMap</span><span class="params">(idAscendingComparator)</span></span>;</span><br><span class="line">    studentMap.<span class="built_in">insert</span>(&#123; &#123;<span class="string">&quot;A&quot;</span>, <span class="number">4</span>, <span class="number">40</span>&#125;, <span class="string">&quot;I am student 1, my name is A&quot;</span> &#125;);</span><br><span class="line">    studentMap.<span class="built_in">insert</span>(&#123; &#123;<span class="string">&quot;B&quot;</span>, <span class="number">4</span>, <span class="number">21</span>&#125;, <span class="string">&quot;I am student 2, my name is B&quot;</span> &#125;);</span><br><span class="line">    studentMap.<span class="built_in">insert</span>(&#123; &#123;<span class="string">&quot;C&quot;</span>, <span class="number">4</span>, <span class="number">12</span>&#125;, <span class="string">&quot;I am student 3, my name is C&quot;</span> &#125;);</span><br><span class="line">    studentMap.<span class="built_in">insert</span>(&#123; &#123;<span class="string">&quot;D&quot;</span>, <span class="number">4</span>, <span class="number">62</span>&#125;, <span class="string">&quot;I am student 4, my name is D&quot;</span> &#125;);</span><br><span class="line">    studentMap.<span class="built_in">insert</span>(&#123; &#123;<span class="string">&quot;E&quot;</span>, <span class="number">4</span>, <span class="number">42</span>&#125;, <span class="string">&quot;I am student 5, my name is E&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; entry : studentMap) &#123;</span><br><span class="line">        <span class="type">const</span> Student&amp; s = entry.first;</span><br><span class="line">        std::cout &lt;&lt; s.name &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; s.id &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; s.age &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>    </div></div><h1 id="构造函数的区别："><a href="#构造函数的区别：" class="headerlink" title="构造函数的区别："></a>构造函数的区别：</h1><p>首先，我发现两种语言在构造函数上不太一样。</p><table><thead><tr><th>语言</th><th>代码示例</th><th>初始化方式</th></tr></thead><tbody><tr><td>C++</td><td><code>cpp Student(string name, int id) : name(name), id(id) &#123;&#125; </code></td><td>初始化列表</td></tr><tr><td>Java</td><td><code>java public Student(String name, int id) &#123;     this.name = name;     this.id = id; &#125; </code></td><td>构造函数体内赋值</td></tr></tbody></table><p>我发现原代码没有用初始化列表来赋值，于是查询资料：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在 Java 中，构造函数的语法不支持像 C++ 中的初始化列表一样的方式来进行构造时赋值。在 Java 中，你需要在构造函数的方法体内手动对成员变量进行赋值。 </span><br><span class="line">如果你在意初始化效率，可以考虑使用 Java 中的双重检查锁定等方式来优化对象的创建过程。</span><br></pre></td></tr></table></figure><p><strong>“双重检查锁”通常用于实现单例模式，这意味着在整个应用程序中只有一个实例。通过使用双重检查锁，可以在多线程环境中确保只有一个线程能够成功初始化对象，并且其他线程会等待或被阻塞，以避免并发初始化的问题。</strong></p><p>我立马联想到了c++中的“静态对象”，<strong>在C++中，可以使用静态成员变量来实现类级别的单例对象。静态成员变量只在类的生命周期内存在一个实例，并且它在类加载时被初始化。这样，每次使用这个类的对象时，都是引用同一个静态对象实例。</strong></p><p>但是，查阅资料知道，虽然这两种方式都可以实现对象的单例特性，但在细节上存在一些差异。双重检查锁主要用于在多线程环境下确保单例对象的正确初始化，而C++的静态对象则是一种在类级别上实现单例的方式，不涉及多线程的同步问题。</p><h1 id="函数对象声明的区别"><a href="#函数对象声明的区别" class="headerlink" title="函数对象声明的区别"></a>函数对象声明的区别</h1><table><thead><tr><th>特点</th><th>Java</th><th>C++</th></tr></thead><tbody><tr><td>实现方式</td><td>实现Comparator接口，重写compare方法</td><td>创建函数对象类，重载函数调用操作符()</td></tr><tr><td>返回值</td><td>整数值，负数表示o1小于o2，正数表示o1大于o2</td><td>布尔值，true表示o1小于o2，false表示o1大于o2</td></tr><tr><td>命名空间</td><td>需要使用类名限定</td><td>可在局部或命名空间内使用</td></tr><tr><td>比较规则</td><td>返回负数、0、正数分别表示小于、等于、大于</td><td>返回true表示小于，false表示大于</td></tr></tbody></table><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyComp</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o2 - o1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComp</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; o1, <span class="type">const</span> <span class="type">int</span>&amp; o2)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o2 &lt; o1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="java的这些key都是什么意思？"><a href="#java的这些key都是什么意思？" class="headerlink" title="java的这些key都是什么意思？"></a>java的这些key都是什么意思？</h2><div class='spoiler collapsed'>    <div class='spoiler-title'>        java    </div>    <div class='spoiler-content'>        <p>public: 是一个访问修饰符，表示被修饰的类、方法或变量可以在任何地方被访问，没有访问限制。</p><p>static: 是一个关键字，用于创建静态成员，包括静态方法、静态变量等。静态成员属于类本身，而不是类的实例。可以通过类名直接访问静态成员，而无需创建对象。</p><p>class: 是一个关键字，用于定义类。类是 Java 中用于创建对象的模板，它包含属性（成员变量）和方法。<br>综合起来，当使用 public static 修饰类或方法时，具体含义如下：<br>ublic class: 定义一个公共类，可以被其他类访问。公共类可以在任何地方被使用。</p><p>public static class: 定义一个公共静态内部类。静态内部类是一个嵌套在其他类中的类，但它与外部类的实例无关，可以通过外部类名直接访问，无需创建外部类的对象。</p><p>public static method: 定义一个公共静态方法。静态方法属于类而不是类的实例，可以通过类名直接调用，无需创建对象。</p>    </div></div><p>而c++就比较熟悉：class 代表声明类，内部用public、private、protected区分访问权限。</p><h1 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h1><p>return o1.id !&#x3D; o2.id ? (o1.id &lt; o2.id) <br>简洁，美观~</p><h1 id="优雅-翩翩起舞的lambda"><a href="#优雅-翩翩起舞的lambda" class="headerlink" title="优雅-翩翩起舞的lambda"></a>优雅-翩翩起舞的lambda</h1><p>C++11引入的特性：Lambda表达式。</p><blockquote><p>Lambda 表达式是C++11引入的特性，它允许你在需要的地方创建匿名的、一次性使用的函数。</p></blockquote><p>例如，在sort函数中，可以直接调用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), [](<span class="type">int</span> a, <span class="type">int</span> b) &#123; <span class="keyword">return</span> a &lt; b; &#125;);</span><br></pre></td></tr></table></figure><p>创建treeMap，也可以直接调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TreeMap&lt;Student, String&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;((a, b) -&gt; a.id - b.id);</span><br></pre></td></tr></table></figure><h1 id="Map-vs-TreeMap"><a href="#Map-vs-TreeMap" class="headerlink" title="Map vs TreeMap"></a>Map vs TreeMap</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::map&lt;Student, std::string, <span class="title">decltype</span><span class="params">(idAscendingComparator)</span>*&gt; <span class="title">studentMap</span><span class="params">(idAscendingComparator)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TreeMap&lt;Student, String&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;((a, b) -&gt; (a.id - b.id));</span><br></pre></td></tr></table></figure><table><thead><tr><th>特点</th><th>C++</th><th>Java</th></tr></thead><tbody><tr><td>数据结构</td><td>std::map&lt;Student, std::string&gt; studentMap;</td><td>TreeMap&lt;Student, String&gt; treeMap;</td></tr><tr><td>有序映射</td><td>有序映射</td><td>有序映射</td></tr><tr><td>自定义比较器</td><td>是</td><td>是</td></tr></tbody></table><pre><code>                             |</code></pre><p>| 比较器设置方式     | 在创建实例后通过函数指针设置                | 在创建实例时通过 Lambda 表达式设置            |<br>| Lambda 表达式     | 适用                                       | 适用                                          |<br>| 代码示例           | <code>std::map&lt;Student, std::string&gt; studentMap(idAscendingComparator);</code> | <code>TreeMap&lt;Student, String&gt; treeMap = new TreeMap&lt;&gt;((a, b) -&gt; (a.id - b.id));</code> |</p><p>When input data whose key has already been in it, both Map andTreeMap will not cover the previous data of the same key, and the new data will be discarded and unaccepted. </p><h1 id="c-auto-vs-it"><a href="#c-auto-vs-it" class="headerlink" title="c++: auto vs it"></a>c++: auto vs it</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (const auto&amp; entry : studentMap) &#123;</span><br><span class="line">    const Student&amp; s = entry.first;</span><br><span class="line">    std::string s1 = entry.second;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; s.name &lt;&lt; &quot;,&quot; &lt;&lt; s.id &lt;&lt; &quot;,&quot; &lt;&lt; s.age&lt;&lt;&quot;  &quot;;</span><br><span class="line">    std::cout &lt;&lt; s1&lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这一行，我坐不住了，心想，auto有没有可以替代的方案？<br>于是，查阅资料，得到如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">std::map&lt;Student, std::string, decltype(idAscendingComparator)*&gt;::const_iterator it;</span><br><span class="line">for (it = studentMap.begin(); it != studentMap.end(); ++it) &#123;</span><br><span class="line">    const Student&amp; s = it-&gt;first;</span><br><span class="line">    std::string s1 = it-&gt;second;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; s.name &lt;&lt; &quot;,&quot; &lt;&lt; s.id &lt;&lt; &quot;,&quot; &lt;&lt; s.age &lt;&lt; &quot;  &quot;;</span><br><span class="line">    std::cout &lt;&lt; s1 &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，可以用it来代替auto，只不过要使用 std::map 的迭代器类型，但会使代码变得更冗长一些。</p><blockquote><p>总的来说，使用 auto 是更为简洁和灵活的方式，因为它允许编译器根据上下文来推断类型。如果你手动指定类型，需要确保类型匹配并且正确。</p></blockquote><h1 id="JAVA的良好特性"><a href="#JAVA的良好特性" class="headerlink" title="JAVA的良好特性"></a>JAVA的良好特性</h1><h2 id="默认传递引用"><a href="#默认传递引用" class="headerlink" title="默认传递引用"></a>默认传递引用</h2><h2 id="数组自带大小信息"><a href="#数组自带大小信息" class="headerlink" title="数组自带大小信息"></a>数组自带大小信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法接受一维数组作为参数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">processArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">            System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法接受二维数组作为参数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">process2DArray</span><span class="params">(<span class="type">int</span>[][] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] row : arr) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : row) &#123;</span><br><span class="line">                System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[][] arr2 = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">        processArray(arr1);</span><br><span class="line">        process2DArray(arr2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相比之下，c++的特性是最难绷的，起码上述Java的两个特性c++都没有：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数接受一维数组作为参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">processArray</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        std::cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数接受二维数组作为参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">process2DArray</span><span class="params">(<span class="type">int</span> arr[][<span class="number">3</span>], <span class="type">int</span> rows, <span class="type">int</span> cols)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rows; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; cols; ++j) &#123;</span><br><span class="line">            std::cout &lt;&lt; arr[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> arr1[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> arr2[][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">processArray</span>(arr1, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">process2DArray</span>(arr2, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>【完】</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言的特性 </tag>
            
            <tag> 比较器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="/post/about.html"/>
      <url>/post/about.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="座右铭"><a href="#座右铭" class="headerlink" title="座右铭"></a>座右铭</h2><p>Real success embodies Tenacity, Target, and Tincture.</p><!-- Real success embodies Personality, Purpose, and Panache. --><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我出生在湖南，在深圳长大。从小就热衷于各种运动，这让我长期保持乐观开朗的性格。我喜欢魔方、24点和足球，足球能够一次颠起400次，它们是我的兴趣和挑战。</p><p>我热衷于解各种问题，享受解决难题带来的成就感。我正在专注地学习人工智能领域，希望将来成为一名有成就的工程师。</p><p>我相信生活中的每一步都是一次学习，我愿意踏实前行，迎接未来的挑战。尽管未来可能充满了不确定性，但我怀揣一颗坚定的心，愿意持续不断地追求自己的目标，用一颗永不言败的心去迎接未知。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阅读加密禅师的小本本</title>
      <link href="/post/7ca1.html"/>
      <url>/post/7ca1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="命运"><a href="#命运" class="headerlink" title="命运"></a>命运</h2><blockquote><p>@禅师<br>    　　一直觉得人的生命只有<code>惯性</code>，并没有命运。<br>下一秒钟做什么，只是不太容易明显改变下下秒的状态，但却对<code>几个月或若干年后的我们完全可以有重大的颠覆性影响</code>。<br><br>所以，<code>永远别</code>考虑用“这是宿命”、“命中定数”这类说辞来<code>否定</code>未来的任何<code>可能性</code>，或者回避我们需要<code>承担</code>的任何<code>责任</code>。<br>下午10:09 · 2023年8月7日<br>    － 逃避现实是否也是一种惯性呢？如何才能停止逃避现实，改变命运呢？<br>    － 禅师：逃避现实是一种行为。你下一秒不逃避现实了，你的遭遇往往不会立刻就巨变，需要你<code>坚持</code>个<code>几个月不逃避现实才会明显变化</code>——这是<code>惯性</code>。</p></blockquote><blockquote><p>@ 花花<br>真心建议:趁着年轻多做有积累的工作<br><code>对于消耗青春的工作没必要碰</code>!<br>每当我看到街上送着外卖的男男女女，我的心里就忍不住地哗啦啦下雨…<br>趁着年轻为什么不去做有<code>积累</code>的事情，什么叫有积累啊?<br>时间过去了，房子也起来了，大多数人做的事情无非是在消耗青春，没有任何积累… 没有积累，年龄越大越廉价，不做这些工作做什么?<br>做需要发挥脑力的事情，做<code>越老越吃香</code>的行业。<code>越来越吃香</code>的行业&#x3D;写作&#x2F;咨询&#x2F;运营&#x2F;流量&#x2F;捌字&#x2F;风水&#x2F;撩汉&#x2F;疗愈&#x2F;心理&#x2F;吃、穿、住、行….<br>有机会一定要多见识<code>见识外面的世界</code>，没见过世面自然目光短浅，目光短浅自然会做无用式循环，做无用式循环自然会成为地地道道的穷人，成为穷人自然会生活在社会边缘，生活在社会边缘自然会被社会淘汰，被社会淘汰了还能做点儿什么?<br>小时候，没见过世界，以为世界很大，大了，接触的人多了，才知道:物以类聚人以群分这辈子自己到底怎么样，是看父母做什么，我们能复制父母什么 或是看身边的人做什么，我们能跟着做点儿什么。<br>做无用式循环的慢慢真成了废物，只关心发家致富的z后真的发家致富了。 生活是什么，它从来不说。芸芸众生<code>做了什么，便成了什么</code>。</p></blockquote><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        时间控制和节省：    </div>    <div class='spoiler-content'>        <blockquote><p>@xfli5<br>1、不浪费自己的时间去管别人闲事、关注别人生活。<br>2、真本事都是偷来的，很少有人真心教你，教你也教不会。<br>3、学习不是目的，用起来才是，换来钱才是。<br>4、你穷并不是因为你不够努力，而是你没有找到正确的方式——囤饼。\<br>5、如果问题有办法解决，那就没有必要担心。<br>6、如果问题没有办法解决，那么担心也没有用。<br>7、看透人际关系，除了父母和子女必须负责任，其他人来去自由，不执着。<br>8、囤饼这件事，坚持下来真的很难，不信你试试！</p></blockquote>    </div></div></blockquote><blockquote><p>@ 章工<br>珍惜时间，<code>不需要三更灯火五更鸡</code>，不是点灯熬油，而是保持生活作息的节奏和秩序。<br>一天天坚持不懈，把精力最好的时间投入到<code>重要的事情</code>上，等待持续积累带来的复利增长。<br>如果你的生活太琐碎，不妨培养早起<code>读书写字</code>的习惯。<code>开启一日琐事之前</code>，<code>榨干最好的脑力</code>，这也是一种<code>高效的时间管理</code>。</p></blockquote><h2 id="成本"><a href="#成本" class="headerlink" title="成本"></a>成本</h2><h3 id="20个剃刀法则"><a href="#20个剃刀法则" class="headerlink" title="20个剃刀法则"></a>20个剃刀法则</h3><blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        20个最具价值的思维剃刀，掌握以下经验法则，能让你做出更好的决策：    </div>    <div class='spoiler-content'>        <ol><li><p><strong>费曼剃刀（The Feynman Razor）</strong><br>如果你不能向一个<code>5岁的孩子</code>解释某个<code>复杂</code>的术语，你就没有真正理解它。</p></li><li><p><strong>聪明的朋友剃刀（The Smart Friends Razor）</strong><br>如果你<code>最聪明的朋友</code>对某件事感兴趣，那这件事就<code>值得</code>关注一下。</p></li><li><p><strong>房间剃刀（The Rooms Razor）</strong><br>如果你可以在进入两个房间之间做选择，选择<code>你更可能是房间里最笨的人</code>的那个房间。一旦你进入房间，<code>少说多听</code>。</p></li><li><p><strong>竞技场里的人剃刀（The Man in the Arena Razor）</strong><br>在场边扔石头很容易，但要进入竞技场却很难。如果你想获得<code>巨大的回报</code>，就必须进入<code>竞技场</code>。</p></li><li><p><strong>意外剃刀（The Serendipity Razor）</strong><br>有些我们所谓的“运气”其实是无数个微观行为的宏观结果。而你的日常习惯造就了无数个微观行为，<code>好的习惯</code>会让你更有可能获得意外之喜。</p></li><li><p><strong>上坡决策剃刀（The Uphill Decision Razor）</strong><br>当面临两个选择时，选择<code>短期内比较困难</code>的那个。</p></li><li><p><strong>难得机会剃刀（The Rare Opportunity Razor）</strong><br>有一种罕见的机会，一般人一生中<code>只能碰到0到1次</code>。它们看起来很<code>吓人</code>，但<code>回报</code>却是<code>巨大</code>的。如果你有幸遇到这样的机会，那就<code>抓住它</code>。</p></li><li><p><strong>巴菲特声誉剃刀（The Buffett Reputation Razor）</strong><br><code>建立一个声誉需要20年，而毁掉它只需要5分钟。</code>如果你<code>考虑到这一点</code>，<code>就会</code>有<code>不同</code>的做法。<em><strong>声誉真的对于人很重要！</strong></em></p></li><li><p><strong>叙事谬误剃刀（The Narrative Fallacy Razor）</strong><br>人类是喜欢<code>讲故事</code>的生物，我们把一系列事件编织在一起，以寻找因果关系，而现实可能只是<code>运气</code>的结果。</p></li><li><p><strong>时间亿万富翁剃刀（The Time Billionaire Razor）</strong><br>当你在两条道路之间做选择时，要<code>选择</code>最<code>珍视你的时间价值</code>的那条路。</p></li><li><p><strong>意见剃刀（The Opinion Razor）</strong><br>如果你并<code>不比对方更了解他们的论点</code>，就<code>不</code>要<code>允许自己</code>对此<code>发表</code>任何<code>意见</code>。</p></li><li><p><strong>担心剃刀（The Worrying Razor）</strong><br>如果你问了一个问题，而对方的反应是<code>提高嗓门、摆摆手或嘲笑</code>，你可能<code>应该``更深入地挖掘</code>这个问题。（？什么意思呢，可能我的段位还是不够吧。）</p></li><li><p><strong>吹牛者剃刀（The Boasters Razor)</strong><br>真正成功的人<code>很少</code>觉得<code>有必要夸耀</code>自己的成功。</p></li><li><p><strong>牛顿的烈焰激光剑（Newton’s Flaming Laser Sword）</strong><br>如果一件事<code>不能通过实验或观察来解决，那它就不值得讨论。</code>记住这一点将让你避免在网上和现实生活中于无谓的争论上浪费大量的时间。<em><strong>（实测真的很有道理——可以用这个法则避免百分之五十的争论）</strong></em></p></li><li><p><strong>希钦斯剃刀（Hitchens’ Razor）</strong><br>可以在<code>没有证据的情况下断言</code>的东西，<code>也可以</code>在<code>没有证据</code>的情况下<code>驳回</code>。</p></li><li><p><strong>勇气剃刀（The Grit Razor）</strong><br>如果必须在两个实力相当的人之间做出选择，<code>选择曾“被打脸”的那个</code>。被打过的人（无论是隐喻上的还是字面上的）很可能拥有真正的勇气。（也有可能才有真正的智慧）</p></li><li><p><strong>汉隆剃刀（Hanlon’s Razor）</strong><br>永远<code>不要把可以用愚蠢</code>来充分解释的事情，<code>归咎于恶意</code>。</p></li><li><p><strong>乐观者剃刀（The Optimist Razor）</strong><br>在选择和谁共度时光时，优先考虑花更多的时间和<code>乐观者</code>在一起。</p></li><li><p><strong>“保持不变”剃刀（The “What Stays the Same” Razor）</strong><br><code>预测未来</code>是困难的，在为未来做准备时，要关注那些<code>不变的东西</code>。</p></li><li><p><strong>保罗·格雷厄姆<code>疯狂想法</code>剃刀（The Paul Graham Crazy Idea Razor）</strong><br>如果有人提出一个看似疯狂的想法，问问你自己：<br>　　（1）他们是这个领域的<code>专家</code>吗？<br>　　（2）他们是很<code>讲道理</code>的人吗？<br>如果你对（1）和（2）的回答都是肯定的，就应该认真对待这个想法，因为这可能是对未来的押注。</p></li></ol>    </div></div></blockquote><h3 id="24个人生感悟"><a href="#24个人生感悟" class="headerlink" title="24个人生感悟"></a>24个人生感悟</h3><blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        24个人生真相与感悟，越早知道越好：    </div>    <div class='spoiler-content'>        <ol><li><p>很多人就是因为<code>好得不彻底，坏得不纯粹</code>，所以才会陷入痛苦的境地当中。</p></li><li><p>千万<code>不要用你以为对人好的方式对别人好</code>，那只是<code>道德式的自我感动</code>罢了。</p></li><li><p>大多数人学习的本质，只停留在“<code>假装很努力</code>”的层面。</p></li><li><p>现在我们接触到的很多信息，大多都是<code>引起人怨恨和焦虑</code>的(令人感动和引发正义感的信息同样是毒药)。<br>所以你必须<code>非常深刻、非常用力地活着</code>，才能<code>免受这些垃圾信息的侵袭</code>，才<code>不会被人操纵</code>。(<em><strong>是啊，每天的时事几乎没几个是真的带来”正能量“的，要时刻警惕避免这些垃圾信息的侵扰！</strong></em>)</p></li><li><p>那个离开你的人，永远别原谅他。<br>他想离开你的瞬间，必定做了<code>利益的权衡</code>，离开你，才符合他<code>更大的利益</code>。</p></li><li><p>多年以来从<code>学校学的那套普世价值观</code>，<code>完美地避开了赚钱</code>，避开了改命这一条道路。<br>对于寒门出身的孩子而言，你接收的很可能不是<code>十几年的教育</code>，而是<code>十几年教育的伤害</code>。</p></li><li><p>想要提升，先<code>清空</code>脑子里的<code>垃圾思维</code>，多跟有成果的人学习。</p></li><li><p>聪明人都知道，<code>不到临死前，不能把权力和真金白银交出去</code>。自己手里一旦没了筹码，任何人都可能背叛自己。(想想也是！)</p></li><li><p>打工只是为了<code>去积累一定的试错成本</code>，想要改命，<code>不断去尝试</code>才是最佳的途径，而<code>不是拿着死工资过生活</code>。</p></li><li><p>不谈感情，聪明人总是把<code>精力放到事业上去</code>，因为他们知道<code>感情是最不靠谱的投资</code>。</p></li><li><p>工作的<code>本质</code>是<code>提升</code>，任何<code>逃避这个事情的动作都费动作</code>。</p></li><li><p>没钱没有什么格局不格局，理想不理想，只有当你<code>收入提高了，格局自然就上来了</code>。做一个尊重市场规则，<code>尊重等价交换</code>的人。</p></li><li><p>聪明人不会哭诉自己已经付出了多少，他们会着眼于未来，<code>谈自己未来会有什么价值</code>，会<code>持续为对方带来多少利益</code>。</p></li><li><p>聪明人<code>往往不借钱给别人</code>。凡是来找你借钱的，95%的情况是对方看你老实本分好欺负。<br>如果你真借给他，当你找他还钱的时候，他极大概率就是大爷。(<em><strong>借出去就当这钱弄丢了！</strong></em>)</p></li><li><p><code>看破不说破</code>。(<em><strong>我要好好锻炼这个能力！</strong></em>)就像是偷电动车的小子说的那样：里面的人个个说话都好听，这些人之所以说话好听，是因为他们说真话。而到了外面，是没人会讲真话的。聪明人都知道，讲真话是要倒霉的，全家跟着倒霉的那种。</p></li><li><p>大张旗鼓的离开其实都是试探，<code>真正的离开是没有告别的</code>。</p></li><li><p><code>聪明人为穷人说话，帮富人办事</code>。(<em>我靠！真特么对</em>)</p></li><li><p>人和人的三观，是不可能真正一致的，<code>不要企图去寻找一个和你三观一致的伴侣</code>。(难道根本就不去找？还是迁就呢？)</p></li><li><p>聪明人的朋友不多，所以只能像高级的哲人独处着。这并不是因为他想孤独，而是因为在他的周围<code>找不到他的同类</code>。</p></li><li><p>伤害你的不是对方的绝情，而是你<code>心存幻想</code>的坚持。无法许下承诺也无法兑现承诺的男人，就要去接受女人随时离开的结局。</p></li><li><p>男女之间之所以能互相吸引，是因为他们能互相满足对方的<code>需求</code>(精神需求、物质需求、生理需求、面子需求)。(本质层面当然是这样)</p></li><li><p><code>大喜大悲，看清自己；大起大落，看清朋友</code>。(大道至简)</p></li><li><p>真正有价值，<code>对提升有帮助的知识</code>，往往是<code>不会有人免费分享</code>的。</p></li><li><p><code>人越聪明，话越少，威严越盛</code>。</p></li><li><p>能<code>改变自己</code>的都是“神”，想着去改变别人的都是神经病。成年人的世界，只饰选，不教育。</p></li></ol>    </div></div></blockquote><blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        《哈佛幸福课》中10个很受用的观点：    </div>    <div class='spoiler-content'>        <ol><li><p>允许自己<code>有缺点、犯错误</code>，允许自己做人而不是神。在合理合法的范围内，对自己宽容一点。</p></li><li><p>好东西太多不是好事，<code>两首好歌同时放</code>，<code>就是噪音</code>。<br>所以，留下自己真正想要的，<code>扔掉并没有很想要的</code>，就算它很珍贵。比物质充裕更能带来幸福的是时间充裕。</p></li><li><p>不要因为害怕失败而放弃去尝试自己<code>真正想做</code>的事，勇气并不是没有畏惧，而是<code>有了畏惧还坚持向前</code>。</p></li><li><p>研究表明，失败真的是成功之母。<code>最成功的人往往是失败得最多的</code>。学会面对自己的失败，在失败中学习。这是学习的不二法门。</p></li><li><p>最能给人幸福感的东西，是<code>良好的人际关系</code>。亲密关系比很多事情都重要，它会给人带去有治愈能力的爱和温暖。</p></li><li><p>从希望被认可变成希望被了解。一个人很多时候不是因为完美而被喜欢，是因为真实而被喜欢。因为<code>真实而被喜欢</code>，才是<code>持久</code>、<code>轻松</code>、<code>可持续发展</code>的。</p></li><li><p><code>多问正面</code>的问题，正面的问题会<code>引导</code>人<code>正向地思考</code>。</p></li><li><p>遇到痛苦的事情，<code>不要反复咀嚼</code>你的<code>痛苦</code>，因为会越嚼越痛苦。</p></li><li><p>去了解自己是哪种人，选择适合自己的<code>恢复和放松方式</code>。</p></li><li><p><code>锻炼是刚需</code>，运动是一项对现在和未来的投资。</p></li></ol>    </div></div></blockquote><blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        让人碌碌无为的一些原因：    </div>    <div class='spoiler-content'>        <ol><li><p><code>牺牲健康</code>、时间、精力和机会，去换取少量的金钱。<br>不会<code>洗择``消耗金钱</code>，来<code>让自己充满活力</code>、拥有<code>自主时间</code>及名种可能性。</p></li><li><p>看似不惧风险，实则<code>喜欢赌博</code>、<code>投机</code>、<code>借贷</code>、<code>胡乱交友</code>、<code>不注意言行</code>并得罪小人。<br>而富人非常<code>谨慎</code>，注重<code>风险管理</code>，做决策之前充分<code>调研</code>，为拥有的套上层层铠甲，明白“<code>善战者无赫赫之功</code>”(<em><strong>仅凭一时的战绩而获得名声的人，不一定能够产生持久的影响或被人所敬仰。</strong></em>)。</p></li><li><p>被眼界所限，缺乏对<code>关键学习</code>、<code>成长可能性</code>、<code>需结交贵人</code>的识别力。<br>即使有<code>意识</code>，也没有<code>积累资源</code>，更容易错失飞跃的机会。</p></li><li><p>喜欢<code>怪罪环境</code>，很难找到内因。认为环境不公、出生不好、运气不行、别人不帮助自己，是他们困难的决定因素。因此更容易屈从于环境，不敢去<code>反抗和改变</code>。</p></li><li><p>在思想上服从于权威，在情感上和亲友依附，需要不断向周围<code>索取</code>情绪。<br>很难忍受孤独，很难有时间学习，也很难有孤军奋斗的精神。</p></li><li><p>很多网络上的炫富信息是虚假的，但由于并不熟悉真正富裕的生活，所以容易相信<code>虚假信息</code>，从而加剧<code>焦虑</code>。</p></li><li><p>由于普遍缺乏资源，行动机会更少，所以常常<code>空想各种可能性</code>。<br>但缺乏<code>基础的实践锤炼</code>、<code>不习惯心理建设</code>、<code>熟练度</code>更<code>低</code>，愈发<code>难以实践</code>。</p></li><li><p>由于生长环境的塑造而<code>缺乏真实信息</code>，更容易被性焦虑驱动、被道德绑架、被消费主义捆绑，从而<code>丧失自主选择</code>。</p></li></ol>    </div></div></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 金玉良言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哲言 </tag>
            
            <tag> 终身学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度之星内训班竞赛题</title>
      <link href="/post/6673.html"/>
      <url>/post/6673.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="题目一-神奇排列"><a href="#题目一-神奇排列" class="headerlink" title="题目一 神奇排列"></a>题目一 神奇排列</h2><p>给定正整数n，求一个长度为2n的数组，满足：<br>1 数组由 1 ~ 2n 共2n个数字打乱组成，且每个数字出现一次<br>2 每个偶数位（从0开始）和其右边的数字（奇数位上）的和组成的长度为n的新数组是一个公差为1的等差数列</p><p>输入：</p><ul><li>第一行一个数字，test的次数</li><li>后面test行，每一行一个数字，为当前test的n<br>输出：</li><li>如果不能组成这样的2n长度数组，输出NO</li><li>如果可以，输出YES，并且打印数组</li></ul><p>样例：<p></p><blockquote><p>输入：</p></blockquote><ul><li>4<p>1<p>2<p>3<p>5<p></li></ul><blockquote><p>输出:</p></blockquote><ul><li>YES<p>2 1<p> NO <p>YES<p> 4 2 6 1 5 3 <p>YES <p>6 3 8 2 10 1 7 5 9 4</li></ul><p>这其实是一个技巧题。如果观察和稍加推导就发现：<br>1 偶数是一定会输出NO。因为中间的和会是一个.5的小数，整数凑不出来<br>2 所有的奇数，在前一半数组中奇数位的数字是n+1，后一半是n+2。我尝试证明，但是感觉有点点复杂。<br>3 既然这样，我们就写出来，在再验证看看。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printarray</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= <span class="number">2</span> * n; i += <span class="number">2</span>) &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="number">2</span> * n + <span class="number">1</span> - (n &gt;&gt; <span class="number">1</span>) + j - i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">2</span>, j = <span class="number">0</span>; j &lt; (n &gt;&gt; <span class="number">1</span>); i += <span class="number">2</span>) &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="number">2</span> * n + <span class="number">2</span> + j - i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> test = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; test;</span><br><span class="line">    <span class="keyword">while</span> (test--) &#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printarray</span>(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>输入 1 5 输出 6 3 8 2 10 1 7 5 9 4</code></p></li><li><p><code>输入 1 7 输出 8 4 10 3 12 2 14 1 9 7 11 6 13 5</code><br>看起来没毛病，我们再用对数器试一下</p></li></ul><div class='spoiler collapsed'>    <div class='spoiler-title'>        对数器版    </div>    <div class='spoiler-content'>        <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">printarray</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// int * originalarray = new int[2*n];</span></span><br><span class="line">    <span class="type">int</span>* processedarray = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">2</span>*n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>*n; i++) &#123;</span><br><span class="line">        processedarray[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= <span class="number">2</span> * n; i += <span class="number">2</span>, j++) &#123;</span><br><span class="line">        <span class="type">int</span> tmp = <span class="number">2</span> * n + <span class="number">1</span> - (n &gt;&gt; <span class="number">1</span>) + j - i;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; tmp &lt;&lt; &quot; &quot;;</span></span><br><span class="line">        processedarray[i] = processedarray[tmp] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">2</span>, j = <span class="number">0</span>; j &lt; (n &gt;&gt; <span class="number">1</span>); i += <span class="number">2</span>, j++) &#123;</span><br><span class="line">        <span class="type">int</span> tmp = <span class="number">2</span> * n + <span class="number">2</span> + j - i;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; tmp &lt;&lt; &quot; &quot;;</span></span><br><span class="line">        processedarray[i] = processedarray[tmp] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (processedarray[i] != <span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Oops!&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot; is bad!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span> * n; i++) &#123;</span><br><span class="line">                cout&lt;&lt;processedarray[i];            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">delete</span>[] processedarray;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">delete</span>[] processedarray;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   <span class="comment">// delete[] originalarray;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> test = <span class="number">10000</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">    <span class="type">bool</span> continue1 = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (test--&amp;&amp;continue1)&#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            continue1 = <span class="built_in">printarray</span>(n);</span><br><span class="line">        &#125;</span><br><span class="line">        n += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;n = &quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><p>用暴力方法来gank，验证从1到2n，每一个数字是不是出现了，程序结果输出20001，意味着前n &#x3D; 1~10000都是正确的，基本上是可以确定没毛病了。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SAF会议_2023_08_03</title>
      <link href="/post/1e40.html"/>
      <url>/post/1e40.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="好处？"><a href="#好处？" class="headerlink" title="好处？"></a>好处？</h2><p><br>1 英语能力，口语听力阅读，大量 paper work<br><br>2 海外名校官方学分+成绩单（至少B+），实质性证明<br><br>3 推荐信（有机会，博士），本科生、名校研究生：海外名校本科老师的推荐信就够了(强推更好)<br><br>4 自信、人脉</p><h2 id="加州"><a href="#加州" class="headerlink" title="加州"></a>加州</h2><p>大学系统，不是分校。互相认可。</p><h2 id="加州大学洛杉矶分校-寒假大数据"><a href="#加州大学洛杉矶分校-寒假大数据" class="headerlink" title="加州大学洛杉矶分校-寒假大数据"></a>加州大学洛杉矶分校-寒假大数据</h2><img src="/post/1e40/page1.png" class="" title="洛杉矶分校大数据1"><br><img src="/post/1e40/page2.png" class="" title="洛杉矶分校大数据2"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第一章—体系结构笔记(未完)</title>
      <link href="/post/b13a.html"/>
      <url>/post/b13a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h1><h2 id="计算机网络的概述"><a href="#计算机网络的概述" class="headerlink" title="计算机网络的概述"></a>计算机网络的概述</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>计网是将独立功能的计算机系统通过通信设备与线路、软件、协议，实现资源共享和信息传递。<br>互连（通过通信链路互联互通）、自治（无主从关系）的计算机集合。</p><h3 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h3><p>第一阶段：分散系统？ARPAnet，同一类型网络；不同网络互联？internet（TCP&#x2F;IP协议）-&gt;Internet（全世界最大的计算机网络）<br>节点+路由器 &#x3D; 网络； 网络*n &#x3D; 互联网<br>第二阶段：NSF+6大型计算机中心 &#x3D; 三级结构。校园网、企业网-&gt;地区网-&gt;主干网<br>第三阶段：多层次ISP结构（因特网服务提供）主干、地区、本地，网络管理权分散。网费：ISP服务费。因特网管理机构管理IP池。本地-&gt;地区-&gt;主干-&gt;地区-&gt;本地；本地-&gt;地区-&gt;IXP(因特网交换点)-&gt;地区-&gt;本地</p><h3 id="不同视角下的组成方式"><a href="#不同视角下的组成方式" class="headerlink" title="不同视角下的组成方式"></a>不同视角下的组成方式</h3><ul><li><h4 id="内部组成"><a href="#内部组成" class="headerlink" title="内部组成"></a>内部组成</h4><code>硬件、软件、协议</code></li><li><h4 id="整体组成–工作方式"><a href="#整体组成–工作方式" class="headerlink" title="整体组成–工作方式"></a>整体组成–工作方式</h4><code>边缘部分（接入的计算机，用户端）</code>  + <code>核心部分（提供服务）</code></li></ul><br>***边缘部分通信方式*** <br>  <p>端到端通信：进程（软件如QQ）之间的通信。两大模式<br>> C/S vs B/S: - C/S（Client & Server）常用，服务与被服务，如QQ- B/S（Browser & Server）> P2P- (peer to peer)设备间无固定身份，同时是客户和服务器，”我为人人人人为我“;<br><ul><li><h4 id="功能组成——实现数据通信和资源共享"><a href="#功能组成——实现数据通信和资源共享" class="headerlink" title="功能组成——实现数据通信和资源共享"></a>功能组成——实现数据通信和资源共享</h4></li></ul><p>数据通信：通信子网，包括：#3 <code>网络层</code>（路由器），#2 <code>数据链路层</code>（交换机，网桥），#1 <code>物理层</code>（集线器，中继器）。由传输介质、通信设备、相应协议组成。<br>中间：#4 <code>传输层</code>。<br>资源共享：资源子网，包括： #5 <code>会话层</code>，#6 <code>表示层</code>，#7 <code>应用层</code>。由相应软件和设备组成。</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li><code>数据通信</code>（数据）</li><li><code>资源共享</code>（数据+硬件+软件）（如何处理请求？操作系统。）</li><li><code>分布式处理</code>（承担同意工作任务的不同部分，Hadoop）<ul><li>（-&gt;<code>提高可靠性</code>，<code>负载均衡</code>），</li></ul></li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>范围:</li></ul><p><code>广域网(交换技术)</code> <code>城域网</code><br><code>局域网(-&gt;)广播技术)</code> <code>个人区域网</code></p><ul><li>使用者:<br>公用网（平民） 专用网（政府军队）   </li><li>交换技术:</li></ul><p><code>电路交换（占用资源+释放资源）</code> <code>报文交换/分组交换(存储转发)</code></p><ul><li>拓扑结构:<br>总线型，星形，环形，网状型</li><li>传输技术:<br>广播式（所有用户都知道）， 点对点网络（分组存储转发和路由选择机制）</li></ul><p>看到这里，来一张图片总结一下：</p><img src="/post/b13a/wangluocover1.png" class="" title="概述脑图"><h2 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h2><h3 id="速率专题"><a href="#速率专题" class="headerlink" title="速率专题"></a>速率专题</h3><p><code>带宽</code>：一般指某一链路上（两个点之间）支持的的“最高数据率”（即理想状态下的能力），单位：b&#x2F;s, kb&#x2F;s, Mb&#x2F;s, Gb&#x2F;s, Tb&#x2F;s  相邻10^3)<br><code>传播速率</code>：2.0E+8 m&#x2F;s<br><code>传输速率</code>：连接在网络上的<code>某一主机</code>在信道上传送数据位数的速率。也称数据率&#x2F;数据传输率&#x2F;比特率(传输数据位数的速率：b&#x2F;s, kb&#x2F;s, Mb&#x2F;s, Gb&#x2F;s, Tb&#x2F;s  相邻10^3)(理论值)<br><code>注意：存储容量数据位数的单位：B, kB, MB, GB, TB  相邻2^10, 1 Byte = 8 bit</code><br>吞吐量：单位时间通过<code>某个网络上（网卡）</code>或者<code>信道</code>或者<code>接口</code>的数据量(多对多)，受到<code>额定传输速率</code>和<code>带宽</code>的限制。</p><p><em><strong>发送的速率和接口关系比较大，而接受速率被缓存、线路质量等限制</strong></em></p><p>数据传输速率 &#x3D; 信道带宽 X 信道利用率；<br>信道利用率 &#x3D; 传输时延 &#x2F; (传播时延 + 传输时延)，也就是在整个数据发送周期中，传输数据占用了多大比例。<br><a href="https://www.ximalaya.com/ask/q2633411?source=m_jump"></a></p><table><thead><tr><th>带宽</th><th>数据速率</th></tr></thead><tbody><tr><td>带宽是在特定时间段内传输的数据的潜力。</td><td>数据速率是在指定时间段内通过网络传输的数据量。</td></tr><tr><td>带宽是链路每秒可以发送或接收的比特数。</td><td>数据速率是数据传输的速度。</td></tr><tr><td>带宽通常以 bps、Mbps 或 Gbps 为单位进行测量。</td><td>数据速率通常以 Mbps 或 MBps 为单位。</td></tr><tr><td>带宽是指最大数据传输速度。</td><td>数据速率指的是实际的数据传输速度。</td></tr><tr><td>带宽是 OSI 模型中的物理层属性。</td><td>数据速率在所有层中都很常见。</td></tr><tr><td>带宽显示了通道的容量。</td><td>数据速率显示了当前的数据传输速度。</td></tr><tr><td>带宽不依赖于发送者或接收者的属性。</td><td>数据速率受到发送者或接收者的影响。</td></tr></tbody></table><p>鉴于这三者的关系过于暧昧，我请教了gpt来答疑解惑：</p><ul><li>gpt解释之文字版</li></ul><blockquote><p>直接看结论：</p></blockquote><p>我们可以将这三个概念简单地理解为：<br><br><code>带宽：对信道能力的衡量，是理论上的最大数据传输能力。</code><br><code>吞吐量：在实际操作中，能够通过网络或信道成功传输的数据量。这是一个实际的测量值，通常受到网络状况（如延迟、数据丢失和重传等）的影响，所以吞吐量通常会小于带宽。</code><br><code>传输速率：针对特定的主机或设备，其在网络中发送数据的理论能力。</code></p><blockquote><p>我时间多，想看具体解释</p></blockquote><p>带宽：通常指的是 <em><strong>.<code>通信信道</code>的数据传输能力</strong></em>也就是单位时间内传送的数据量。比如，我们经常会听到10Mbps，100Mbps，1Gbps等说法，这些都是带宽的描述。带宽越大，<code>理论</code>上单位时间内可以传送的数据量就越大。然而，实际的数据传输量往往受到很多因素的影响，比如网络拥堵，数据丢失和重传等，因此实际的数据传输量通常会小于带宽。</p><p>吞吐量：吞吐量是指单位时间内成功传送的数据量。与带宽不同，吞吐量是一个实际的测量值，反映的是实际的数据传输效果，是对整个网络或者特定信道、接口的实际传输效果的度量。吞吐量受到许多因素的影响，比如带宽，网络延迟，数据丢失和重传等。<em><strong>你的网络吞吐量就是你<code>实际</code>下载文件的速度。</strong></em></p><p>传输速率：传输速率是指一个特定的主机或设备，单位时间内发送的比特数。与带宽相似，传输速率也是一个<code>理论值</code>。在实际应用中，由于需要对数据进行编码，添加错误检测和纠正码，以及其他协议开销，实际的数据传输速率通常会小于物理传输速率。通常情况下，我们所说的网络速度，比如10Mbps，100Mbps等，实际上是指的物理传输速率。实际的传输速率可能会受到许多因素的影响，比如网络拥塞，接口性能，发送数据的类型和大小。<em><strong>传输速率是针对单一主机或设备的特性，而不是整个网络或者信道的性能。</strong></em></p><blockquote><p>gpt解释之表格版</p></blockquote><img src="/post/b13a/image_2023-08-04_01-14-35.png" class="" title="gpt表格版"><h3 id="时延-延迟-迟延"><a href="#时延-延迟-迟延" class="headerlink" title="时延&#x2F;延迟&#x2F;迟延"></a>时延&#x2F;延迟&#x2F;迟延</h3><p>指数据从出发到目的地所需要的时间（单位：s）。<br>按先后顺序分为：<code>发送时延</code>，<code>传播时延</code>，<code>排队时延</code>，<code>处理时延</code></p><ul><li>发送时延(bit&#x2F;s)<br><code>主机接口</code>处用于<code>输出数据</code>所用总时间。公式：（数据长度）&#x2F;（信道带宽&#x2F;发送时率）。带宽对这的影响最大，常说的高速链路就是指发送时延低。</li><li>传播时延(m&#x2F;s)<br>路途中传输数据用时。公式：（信道长度）&#x2F;（电磁波传播数率）</li><li>排队时延<br>从 <code>数据到达目的地</code> 开始到 <code>数据被处理</code> 用时。即等待链路可用。</li><li>处理时延<br>检错、找出口用时。<img src="/post/b13a/shiyanwangdao.png" class="" title="时延"></li></ul><h3 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h3><p>formula : 时延带宽积 &#x3D; 传播时延 * 带宽<br>bit &#x3D; s * (b&#x2F;s)<br>指：假设某主机不间断向服务器发送数据，第一个比特到达服务器时，整个信道上的比特数。亦即：信道满载时的比特数。亦即：以比特为单位的链路长度。</p><p>这是csdn一个博主的解释：</p><img src="/post/b13a/delaycsdn1.png" class="" title="时延带宽积"><p><br>原链接：</p><blockquote><p><a href="https://blog.csdn.net/ahLOG/article/details/116202211" target="_blank">延时带宽积</a></p></blockquote><h3 id="往返时间RTT"><a href="#往返时间RTT" class="headerlink" title="往返时间RTT"></a>往返时间RTT</h3><p>从发送的第一个bit开始计时，到服务器针对所接收数据而返回的信息到达发送方为止。<br>formula: 传播时延*2+末端处理时间<br>注意：跟传输时间没有半毛钱关系！<br>推导：RTT越大，在收到确认之前，可以发送的数据越多。</p><h3 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h3><p>信道利用率：有数据在信道上的时间&#x2F;总时间<br>网络利用率：信道利用率的加权平均值<br>与时延的近似关系：时延 &#x3D; -1&#x2F;(利用率-1)</p><img src="/post/b13a/guanxi.png" class="" title="时延"><h2 id="体系结构-参考模型"><a href="#体系结构-参考模型" class="headerlink" title="体系结构&amp;参考模型"></a>体系结构&amp;参考模型</h2><blockquote><p>计算机网络体系结构简称网络体系结构，是分层结构，是各层及其协议的集合</p></blockquote><h3 id="分层结构-协议-接口-服务"><a href="#分层结构-协议-接口-服务" class="headerlink" title="分层结构&#x2F;协议&#x2F;接口&#x2F;服务"></a>分层结构&#x2F;协议&#x2F;接口&#x2F;服务</h3><ul><li><h4 id="分层结构-实体"><a href="#分层结构-实体" class="headerlink" title="分层结构&#x2F;实体"></a>分层结构&#x2F;实体</h4>1 各层相互独立     <p>   2 每层之间交流尽可能少  <p> 3 促进标准化，每层用最合适的技术  <p>   4 层数相等的才称为<code>对等实体</code>，共用一套协议</li><li><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4>1 水平方向，对等实体 2 语法、语义、同步（顺序）的互通</li><li><h4 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h4>1 垂直方向 2 下层为上层提供服务，给上层提供服务所需要的<code>接口</code></li><li><h4 id="数据单元"><a href="#数据单元" class="headerlink" title="数据单元"></a>数据单元</h4>1 SDU-&gt;Service Data Unit， 服务数据单元，“原始数据”<br>2 PCI-&gt;Protocol Control Information，协议控制信息用于保持同步，例如序列号，校验和，帧类型。<br>3 PDU-&gt;Protocol Data Unit，协议数据单元，PDU &#x3D; PCI+SDU。</li><li>服务和接口不能跨层<blockquote><p>广义上，SDU，PCI，PDU可以指任何一层对应的数据</p></blockquote></li></ul><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>OSI参考模型 + TCP&#x2F;IP参考模型 &#x3D; 5层体系结构</p><h2 id="OSI参考模型（7层）"><a href="#OSI参考模型（7层）" class="headerlink" title="OSI参考模型（7层）"></a>OSI参考模型（7层）</h2><p>法定标准，IBM公司的SNA是第一个网络体系结构，后来又DEC的DNA，美国国防部的TCP&#x2F;IP。<br>ISO公司1984提供OSI模型，非垄断，支持异构网络系统的互联互通。理论成功，市场失败。</p><img src="/post/b13a/seven_level_structure.png" class="" title="七层结构：“物联网淑慧试用”"><img src="/post/b13a/4vs3.png" class="" title="上四层体现为端到端，下三层体现为点到点"><img src="/post/b13a/full_process.png" class="" title="数据链路层才有头尾，物理层传0和1"><ul><li><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4></li></ul><p>程序本身   </p><ul><li><h4 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h4></li></ul><p>1 格式变换 <p> 2 加密解密 <p> 3 压缩恢复</p><ul><li><h4 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h4></li></ul><p>向表示层&#x2F;用户进程建立连接<p><br>1 建立、管理、终止会话 <p> 2 使用校验点&#x2F;同步点恢复通信，实现同步(传输大文件)</p><ul><li><h4 id="传输层（传输单位：报文段-用户数据报）"><a href="#传输层（传输单位：报文段-用户数据报）" class="headerlink" title="传输层（传输单位：报文段&#x2F;用户数据报）"></a>传输层（传输单位：报文段&#x2F;用户数据报）</h4></li></ul><p>1 可靠传输（大文件，需要校验）&#x2F;不可靠传输（小文件）<p><br>2 差错控制<p><br>3 流量控制（防止缓存过多）<p><br>4 复用（多个应用层同时使用下面的运输层服务）分用（运输层把信息分别交给对应进程）</p><ul><li><h4 id="网络层-数据报-n-分组，分开方便传输"><a href="#网络层-数据报-n-分组，分开方便传输" class="headerlink" title="网络层(数据报 &#x3D; n * 分组，分开方便传输)"></a>网络层(数据报 &#x3D; n * 分组，分开方便传输)</h4></li></ul><p>1 路由选择-&gt;最佳路径<p><br>2 差错控制<p><br>3 流量控制<p><br>4 拥塞控制</p><ul><li><h4 id="数据链路层-帧-n-数据报"><a href="#数据链路层-帧-n-数据报" class="headerlink" title="数据链路层 帧 = n * 数据报"></a>数据链路层 <code>帧 = n * 数据报</code></h4></li></ul><p>1 成帧 <p>2 差错控制<p> 3 流量控制 <p>4 访问接入控制（广播式，控制信道访问） </p><ul><li><h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4></li></ul><p>1 定义解口特性  <p>2 单工（固定角色）；半双工（同时只有一个人发送信息，但是都有机会发送、接收）；双工（同时发送、接收） <p>3 定义传输速率 <p> 4 比特同步（时钟控制） <p> 5 比特编码（电压范围） </p><h2 id="TCP-IP参考模型（4层）"><a href="#TCP-IP参考模型（4层）" class="headerlink" title="TCP&#x2F;IP参考模型（4层）"></a>TCP&#x2F;IP参考模型（4层）</h2><p>事实标准（先有协议才有模型）</p><img src="/post/b13a/ISO_vs_TCP_IP.png" class="" title="对比"><img src="/post/b13a/ISO_vs_TCP_IP(2).png" class="" title="对比(2)"><p>为什么说TCP&#x2F;IP将IP作为重要层次，所以在网络层指由无连接的模式？</p><details>  <summary>ChatGPT的回答</summary>TCP/IP是一种通信协议族，由两个主要的协议组成：TCP（传输控制协议）和IP（网际协议）。它们在计算机网络中扮演了重要的角色。<br>TCP/IP将IP作为重要的层次，因为IP负责在网络层提供数据包的路由和传递。网络层是TCP/IP协议栈中的第三层，其主要功能是处理数据包的转发和路由，以确保数据能够在不同网络之间传输。<br>IP协议采用无连接的传输模式，也称为"无状态"传输。这意味着在传输数据之前，IP不会建立任何持久的连接或会话状态。每个数据包在传输时都是独立的实体，它们被独立地处理和转发，与之前或之后的数据包没有直接关联。<br>IP作为无连接协议的主要优点是简单和灵活。由于每个数据包都是独立的，网络中的路由器可以更容易地处理和转发它们。这种无连接的特性使得IP协议适用于许多不同类型的网络，并且使得网络扩展更加容易，因为新的设备可以很容易地加入网络而不需要修改网络的整体结构。<br>然而，无连接的传输模式也带来了一些问题。由于IP不维护连接状态，因此无法保证数据包的顺序到达目的地，也不能保证数据包的可靠传输。为了解决这些问题，TCP协议在IP之上提供了可靠的、面向连接的数据传输，从而构成了TCP/IP协议栈的两个主要部分。<br>总的来说，TCP/IP将IP作为重要的层次，并在网络层采用无连接的传输模式，这使得网络可以更加灵活和简单，但也需要上层协议如TCP来提供可靠性和有序性。</details><h3 id="5层结构"><a href="#5层结构" class="headerlink" title="5层结构"></a>5层结构</h3><img src="/post/b13a/5%E5%B1%82%E7%BB%93%E6%9E%84.png" class="" title="结构"><img src="/post/b13a/5%E5%B1%82%E8%A7%A3%E5%B0%81%E8%A3%85.png" class="" title="步骤"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><img src="/post/b13a/%E7%AC%AC%E4%B8%80%E7%AB%A0%E8%84%91%E5%9B%BE%E6%80%BB%E7%BB%93.png" class="" title="summary"><p>第一章用了两天时间刷完了，感觉有点喘不上气，不过情绪还算平稳。用这个速度下去岂不是特么半个月学完了。。。所以还是要刷题巩固，要不然全是骗自己呢。加油😄。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大一暑假小结</title>
      <link href="/post/97185e65.html"/>
      <url>/post/97185e65.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="暑假过半小总结"><a href="#暑假过半小总结" class="headerlink" title="暑假过半小总结"></a>暑假过半小总结</h1><h2 id="学习永无止境"><a href="#学习永无止境" class="headerlink" title="学习永无止境"></a>学习永无止境</h2><p>自从放假以来，已经有一个多月了。这三十多天里，虽然不能说收获颇多，起码能称得上充实有料。都快上大二的人了，才开始重视保研竞赛加分，只能说侧面反映这个大一摆得真得舒服。不论怎样，起码已经开始动起来了：</p><h3 id="算法：从入门到入士"><a href="#算法：从入门到入士" class="headerlink" title="算法：从入门到入士(?"></a>算法：从入门到入士(?</h3><p>学习了（观看，部分实现）左神的19节体系算法班的课程，课程时长共计40h，接触了包括但不限于复杂度、异或运算、归并排序、二叉树、递归与动态规划、KMP算法、bfprt算法等等知识概念，不过有很大程度<br>上都是看得很爽而自己不太想动手。这是一个需要耐心解决的毛病😄。主要还是要亲自下海感受一下这些算法的魅力之处，老是看别人玩怎么行，不手撕一下代码这个东西永远都是别人的。所以，从今天起，每一次的课程都要<br>以自己动手为最终目标，而不是以量为目标学习。不过量也不能太少，起码每天要接触些新的奇技淫巧，也要做到手不生疏就行。</p><h3 id="规划：任何时候都不迟！"><a href="#规划：任何时候都不迟！" class="headerlink" title="规划：任何时候都不迟！"></a>规划：任何时候都不迟！</h3><p>初步了解、规划大二的时间安排情况。<code>首先</code>要保证课内的课程分数可观，起码要能有一定的提升，主课不能落下，所以晚上千万要早一些睡。 <code>其次</code>，要及时关注教务处的通知，比如这一次的全国大学生数学竞赛就是因为我太专注于<br>（？还不是你好久没登教务处网）复习而没有关注到报名需求，导致最后失去这个绝佳的机会。又要等待一年才能有机会参加。 <code>最后</code>，要合理规划时间，腾出来的时间要么用来看专业书，要么用来看名校的网课，要么用来考研，要么用来提高课内的学分绩点课程，要么用来弄竞赛或者科研，要么用来跑实验室（如果有机会进实验室的话🤭）。总之，用来玩的时间可以说越来越少了，大学很短，且行且珍惜。</p><h3 id="走访：穿越到未来看我的样子"><a href="#走访：穿越到未来看我的样子" class="headerlink" title="走访：穿越到未来看我的样子"></a>走访：穿越到未来看我的样子</h3><p>这个暑假还<code>走访了oppo、百度、腾讯三家头部企业</code>，其中oppo是我校的学长学姐接待的，热情满满；百度是部门刚入职的学长接待的，很接地气；腾讯是位十分漂亮的小姐姐带我们走了全程，传授了很多面经。总的来说，虽然我还没有接触什么技术栈或者一些具体的工作流程，但是在像这些公司一样的一家<code>重视员工</code>的企业，我觉得<code>非常具有幸福感</code>~跟他们交流，不仅对自己的未来规划会更加清晰，还能收获一些分量十足的建议，这也是我非常想进实验室的原因。一定要努力呀！！</p><h3 id="自我反思：提醒自己入行的初衷"><a href="#自我反思：提醒自己入行的初衷" class="headerlink" title="自我反思：提醒自己入行的初衷"></a>自我反思：提醒自己入行的初衷</h3><p>其实我还是会时常问自己，为什么我要选择这个道路？思来想去，到最后答案都是想创造一个机器替代人工的社会，一个生产力爆棚的社会，一个精神层次能更高的社会。我小时候就有<code>危机感</code>，害怕人类被机器取代以后就难以掌控世界。其实这种担心客观来说是合理的，但是这不是抑制技术发展的理由。我相信在良好的环境（不论是监管环境，开源环境或者是某些方面的社会环境）下，机器一定能给人一种<code>类天堂</code>的感觉，只是这离我们还有一点点距离。在这个注定会深刻改变未来的时间点，踏足计算机科学真的是一件很酷的事情。</p><h2 id="给生活加点料"><a href="#给生活加点料" class="headerlink" title="给生活加点料"></a>给生活加点料</h2><h3 id="足球：最大的爱好"><a href="#足球：最大的爱好" class="headerlink" title="足球：最大的爱好"></a>足球：最大的爱好</h3><p>一回来就有同学约球，一踢就是到晚上十点，结果回家的路上去地铁站，跟同学聊天tmd走偏了好几公里，好在赶上末班车顺利到家😕，要不真的半夜还在马路上，谁看了都担心这帅小伙被拐走了U•ェ•*U</p><h3 id="电影：八角笼中"><a href="#电影：八角笼中" class="headerlink" title="电影：八角笼中"></a>电影：八角笼中</h3><p>高中同学约我去看，虽然套路确实太tm土了，不过里面的一些人物还是挺引人深思的：穷困家庭的孩子，小时候就跟着大人一起打劫，就算是后来被培养成了拳击能手，<code>一旦失去了一个长辈的在场管教</code>，他就像一块永磁铁，被打劫这一块吸铁石牢牢地吸走，重新开启旧事业。老鼠儿子会打洞，<code>人的家庭环境对其一生的影响是不可估量的</code>。你说这个拳击教练他有错吗？<code>必然有</code>，因为他插手了这些孩子们的童年和青春，所以他必须要为他们的成人做好准备。既然他是唯一一个孩子们亲近的大人，除了教他们打拳击挣钱（不寒掺！），更要给他们一些<code>心理的建设</code>，这才是支撑他们克服原生家庭的<code>唯一法宝</code>。他们重拾旧业，就是因为他们骨子里还是那个穷小子，那个没有一技傍身，即使他们已经在拳击行业有一些傲人的成就。我记得到最后他们也没有真正进学校上过一次学，意味着他们的学历将是“无”，虽然我也不搞学历崇拜，但是现实中如果有这么一批孩子，是多么可悲、可怜。所以，其实这整个社会都付有一定的连带责任，但是如果这个社会并不是唯学历论，我相信这群年轻的孩子肯定可以通过自己的双手打拼出来，<code>带着他们的姐姐来城市看一看世间的繁华</code>，而不是窝在阴暗的床上编手工品。</p><h3 id="探访母校：对人以诚，对事以精"><a href="#探访母校：对人以诚，对事以精" class="headerlink" title="探访母校：对人以诚，对事以精"></a>探访母校：对人以诚，对事以精</h3><p>看完电影，同学说想参观下我的初中母校，于是步行10min到达校门口。跟警卫处说明来意，他们非常乐意地开了门。我们绕了整个学校一圈，还特地去九六班看了看，怀念那时的卷王姿态啊~中午放学、下午放学我总是全班最后一个走，真想不懂那时为啥这么卷，也许就是那时的我给我现在的条件吧。应了多年前的那句网络名言“未来的你，会感谢现在努力的自己”。实话实说，在城市中心夜晚的母校，就是望着窗外睡一觉都会感觉很舒服。我可能是个灯光控吧😄。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实这个暑假还有一些小故事，比如，pubg<code>出了金</code>（烟枪，虽然没啥用，不过这是第二次免费出金了嘻嘻）；还有<code>分到了想去的人工智能专业</code>等等，不一而足。一句话概括，那就是：<br><code>这个暑假，为我这平淡无奇的学生生涯添上了丰富的色彩，纵使未来充满挑战，但我一定能看到希望，把握机遇。</code></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 日记/规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 活着，就要有人样 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序之反思</title>
      <link href="/post/673e5681.html"/>
      <url>/post/673e5681.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>  众所周知，快速排序是一个复杂度较为低的排序，平均时间复杂度约n*log(n)，今天，我尝试对快速排序的本质做一些理解和复习。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span>  a[<span class="number">101</span>], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quicksort1</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> i, j, t, temp;</span><br><span class="line">        <span class="keyword">if</span>(left &gt; right)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        temp = a[left];<span class="comment">//temp中存的就是基准数</span></span><br><span class="line">        i = left;<span class="comment">//左边界</span></span><br><span class="line">        j = right;<span class="comment">//右边界</span></span><br><span class="line">        <span class="keyword">while</span>(i != j)&#123;<span class="comment">//当左右边界相等时，说明已经遍历完毕</span></span><br><span class="line">                <span class="keyword">while</span>(a[j] &gt;= temp &amp;&amp; i &lt; j)<span class="comment">//从右往左找到第一个小于temp的数</span></span><br><span class="line">                        j--;<span class="comment">//j--</span></span><br><span class="line">                <span class="keyword">while</span>(a[i] &lt;= temp &amp;&amp; i &lt; j)<span class="comment">//从左往右找到第一个大于temp的数</span></span><br><span class="line">                        i++;</span><br><span class="line">                <span class="keyword">if</span>(i &lt; j)&#123;<span class="comment">//为何是i&lt;j，因为i==j时，说明已经遍历完毕</span></span><br><span class="line">                        t = a[i];<span class="comment">//交换</span></span><br><span class="line">                        a[i] = a[j];</span><br><span class="line">                        a[j] = t;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a[left] = a[i];</span><br><span class="line">        a[i] = temp;</span><br><span class="line">        <span class="built_in">quicksort1</span>(left, i - <span class="number">1</span>);<span class="comment">//</span></span><br><span class="line">        <span class="built_in">quicksort1</span>(i + <span class="number">1</span>, right);<span class="comment">//递归</span></span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>   这是一开始的想法。取最左边的元素为<code>基准点</code>，然后j先动，直到找到<code>小于基准点</code>的那个元素；接着动i，直到找到<code>大于基准点</code>的那个元素；交换j,i的元素；像这个步骤顺序执行，直到任何一刻，<code>i == j</code>，然后，交换i位置和<code>基准点</code>位置的元素。这样就能达到<code>基准点</code>左侧的数<code>小于基准点</code>，<code>基准点</code>左侧的数<code>大于基准点</code>。然后，再调用递归，分别将<code>基准点</code>左侧和右侧<code>修正</code>为面向<code>新基准点</code>的类排序状态，直到这个调用结束。说实话，这有一点像深度优先搜索的例子。<br>    但是，chatgpt告诉我，它有更好的方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> pivot = arr[left];</span><br><span class="line">    <span class="type">int</span> i = left, j = right;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= pivot)</span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            arr[i++] = arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= pivot)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            arr[j--] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[i] = pivot;</span><br><span class="line">    <span class="built_in">quicksort</span>(arr, left, i - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">quicksort</span>(arr, i + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   这是gpt的思路：它一开始就不打算将arr[left]保留至原位置。当j移动到<code>小于基准点</code>的位置，原来i位置的数会被j位置的覆盖；然后i移动到<code>大于基准点</code>的位置，j位置的数于是被i位置的覆盖。如此循环，仅仅a[left]是没有<br>被放进数列的。最后当i和j相遇，不管前面是什么情况，这个相遇位置的数一定已经被移动到它应该去的地方，于是在此处写入a[left]。然后也是调用递归。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>   其实快速排序让我敬畏之许久，导致很长一段时间我都觉得这个排序很“迷”。为何？因为它的边界条件、特殊情况和执行顺序：</p><h3 id="边界条件"><a href="#边界条件" class="headerlink" title="边界条件"></a>边界条件</h3><p>   a[left]是最大的数，且整个数列是逆序的，不就会执行非常多次？<br>    确实，如果是逆序，那么是会执行n + (n-1) + (n-2) + … + 1 次，也就是冒泡排序的次数。</p><h3 id="特殊情况-执行顺序"><a href="#特殊情况-执行顺序" class="headerlink" title="特殊情况&#x2F;执行顺序"></a>特殊情况&#x2F;执行顺序</h3><p>   如果i从左至右能找到三个<code>大于基准点</code>的数，反之j从右至左能找到一个或者两个<code>小于基准点</code>的数，那么这个排序不就不成立了？这是我从一开始就很疑惑的点。不妨来举一个例子说清楚这个问题：<br><code>arr = &#123;5, 6, 7, 8, 2 , 1&#125;</code>这个数组执行代码（第一种解法）过程中，1 和 6 会被先定位，然后交换<code>arr = &#123;5, 1, 7, 8, 2 , 6&#125;</code>，接着是2，7，<code>arr = &#123;5, 1, 2, 8, 7, 6&#125;</code></p><p>接下来，就是这个排序的精华（起码我是这么认为的啦）了：永远先让j动——j移动到 “2” 的位置，与i重合。然后 5 和 2 交换，得到<code>arr = &#123;2, 1, 5, 8, 7, 6&#125;</code>，怎么样，不还是能跑嘛！</p><p>   <em><strong>其实，j 先动，就能保证j右边的全是比 j 要大的，这是最重要的一环。</strong></em></p><p>如果把 i 和 j 的移动顺序调换，上面的例子会变成<code>arr = &#123;8, 1, 2, 5, 7, 6&#125;</code>（ i 先到 8 的位置）。这样就不符合 5 左边的数都比 5 小的初衷了。因为，如果 i 先动，只能保证 i 左边的数会比 <code>基准点</code> 小，但是这个过程中一旦 i 和 j 碰面了，或者像这个例子，i右边且j左边没有小于<code>基准点</code>的数了，一定会让这个尴尬的位置非常棘手。<em><strong>究其根本的原因，<br>   就是我们规定的是左小右大的排列顺序：最后一个和a[left]交换的一定不能大于<code>基准点</code>。所以，当j先动，不可避免地遇上了i，此时的i是先前被交换过来的那个 <code>旧j</code>位置的<code>小于基准点</code>的数，当然不怕和a[left]交换位置；<br>   然而当i先动，若是不可避免地遇上了j，此时的j是先前被交换过来的那个 <code>旧i</code>位置的<code>大于基准点</code>的数，当然不能和a[left]交换位置，否则新的a[left]不就一定会&gt;<code>基准点</code>咯！</strong></em></p><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>   那么，如果左小右大，应该j先动，是不是说左大右小，就是i先动？让我们看下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> pivot = arr[left];</span><br><span class="line">    <span class="type">int</span> i = left, j = right;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &lt;= pivot)</span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            arr[i++] = arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &gt;= pivot)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            arr[j--] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[i] = pivot;</span><br><span class="line">    <span class="built_in">quicksort</span>(arr, left, i - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">quicksort</span>(arr, i + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   这是gpt给的，当然经过验证是正确的代码。我们可以看到，用这种方式，我们确实可以做到左小右大。经过今天的分析，我们能得到一个结论：i和j的移动顺序和得到的数组的要求有密切的关系：要求 &#x3D;&#x3D; 左小右大？ j 先动 : 要求 &#x3D;&#x3D; 左大右小？ : i 先动 : 俺也不知道。<br>   （容我写个嵌套三目结束今天的战斗！）</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> c++ </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
